[
  {
    "question": "Question: Return the total and minimum enrollments across all schools. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
    "from": "spider"
  },
  {
    "question": "Question: Find the total student enrollment for different affiliation type schools. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
    "from": "spider"
  },
  {
    "question": "Question: What are the total enrollments of universities of each affiliation type? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
    "from": "spider"
  },
  {
    "question": "Question: How many schools do not participate in the basketball match? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of universities that do not participate in the baketball match. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
    "from": "spider"
  },
  {
    "question": "Question: Find the schools that were either founded after 1850 or public. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
    "from": "spider"
  },
  {
    "question": "Question: What are the schools that were either founded before 1850 or are public? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
    "from": "spider"
  },
  {
    "question": "Question: Find how many different affiliation types there are. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(DISTINCT affiliation) FROM university",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of different affiliation types. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(DISTINCT affiliation) FROM university",
    "from": "spider"
  },
  {
    "question": "Question: Find how many school locations have the word 'NY'. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
    "from": "spider"
  },
  {
    "question": "Question: How many universities have a location that contains NY? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the team names of the universities whose enrollments are smaller than the average enrollment size. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of teams from universities that have a below average enrollment? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of universities that have over a 20000 enrollment size for each affiliation type. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
    "from": "spider"
  },
  {
    "question": "Question: What are the different affiliations, and how many schools with each have an enrollment size of above 20000? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
    "from": "spider"
  },
  {
    "question": "Question: Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
    "from": "spider"
  },
  {
    "question": "Question: What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
    "from": "spider"
  },
  {
    "question": "Question: What is the maximum enrollment across all schools? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT max(Enrollment) FROM university",
    "from": "spider"
  },
  {
    "question": "Question: Return the maximum enrollment across all schools. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT max(Enrollment) FROM university",
    "from": "spider"
  },
  {
    "question": "Question: List all information regarding the basketball match. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT * FROM basketball_match",
    "from": "spider"
  },
  {
    "question": "Question: What is all the information about the basketball match? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT * FROM basketball_match",
    "from": "spider"
  },
  {
    "question": "Question: List names of all teams in the basketball competition, ordered by all home scores in descending order. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all the teams in the basketball competition, sorted by all home scores in descending order? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
    "from": "spider"
  },
  {
    "question": "Question: the names of models that launched between 2002 and 2004. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
    "from": "spider"
  },
  {
    "question": "Question: Which model has the least amount of RAM? List the model name and the amount of RAM. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"? | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";",
    "from": "spider"
  },
  {
    "question": "Question: How many phone hardware models are produced by the company named \"Nokia Corporation\"? | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";",
    "from": "spider"
  },
  {
    "question": "Question: What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"? | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the average ROM size of phones produced by the company named \"Nokia Corporation\"? | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
    "from": "spider"
  },
  {
    "question": "Question: List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;",
    "from": "spider"
  },
  {
    "question": "Question: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
    "from": "spider"
  },
  {
    "question": "Question: Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\". | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
    "from": "spider"
  },
  {
    "question": "Question: List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\" | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: List the name of the company that produced more than one phone model. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
    "from": "spider"
  },
  {
    "question": "Question: List the maximum, minimum and average number of used kb in screen mode. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;",
    "from": "spider"
  },
  {
    "question": "Question: List the name of the phone model launched in year 2002 and with the highest RAM size. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: What are the wifi and screen mode type of the hardware model named \"LG-P760\"? | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
    "from": "spider"
  },
  {
    "question": "Question: List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;",
    "from": "spider"
  },
  {
    "question": "Question: List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\" | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
    "from": "spider"
  },
  {
    "question": "Question: List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";",
    "from": "spider"
  },
  {
    "question": "Question: List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of phones for each accreditation type. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
    "from": "spider"
  },
  {
    "question": "Question: How many phones belongs to each accreditation type? | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
    "from": "spider"
  },
  {
    "question": "Question: Find the accreditation level that more than 3 phones use. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3",
    "from": "spider"
  },
  {
    "question": "Question: Find the details for all chip models. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT * FROM chip_model",
    "from": "spider"
  },
  {
    "question": "Question: How many models do not have the wifi function? | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of chip model that do not have wifi. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
    "from": "spider"
  },
  {
    "question": "Question: List all the model names sorted by their launch year. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT model_name FROM chip_model ORDER BY launch_year",
    "from": "spider"
  },
  {
    "question": "Question: Find the average ram mib size of the chip models that are never used by any phone. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of the chip models that are not used by any phone with full accreditation type. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
    "from": "spider"
  },
  {
    "question": "Question: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. | Tables: chip_model, screen_mode, phone | Columns: chip_model.Model_name, chip_model.Launch_year, chip_model.RAM_MiB, chip_model.ROM_MiB, chip_model.Slots, chip_model.WiFi, chip_model.Bluetooth, screen_mode.Graphics_mode, screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours, screen_mode.used_kb, screen_mode.map, screen_mode.Type, phone.Company_name, phone.Hardware_Model_name, phone.Accreditation_type, phone.Accreditation_level, phone.Date, phone.chip_model, phone.screen_mode What is the SQL query?",
    "answer": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
    "from": "spider"
  },
  {
    "question": "Question: How many countries are there in total? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT count(*) FROM country",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of countries. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT count(*) FROM country",
    "from": "spider"
  },
  {
    "question": "Question: Show the country name and capital of all countries. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Country_name ,  Capital FROM country",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and capitals of each country? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Country_name ,  Capital FROM country",
    "from": "spider"
  },
  {
    "question": "Question: Show all official native languages that contain the word \"English\". | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the official native languages that contain the string \"English\". | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
    "from": "spider"
  },
  {
    "question": "Question: Show all distinct positions of matches. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT DISTINCT POSITION FROM match_season",
    "from": "spider"
  },
  {
    "question": "Question: What are the different positions for match season? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT DISTINCT POSITION FROM match_season",
    "from": "spider"
  },
  {
    "question": "Question: Show the players from college UCLA. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
    "from": "spider"
  },
  {
    "question": "Question: Who are the players from UCLA? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the distinct position of players from college UCLA or Duke. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the different positions of players from UCLA or Duke colleges? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the draft pick numbers and draft classes of players whose positions are defenders. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the draft pick numbers and draft classes for players who play the Defender position? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct teams are involved in match seasons? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT count(DISTINCT Team) FROM match_season",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of different teams involved in match season. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT count(DISTINCT Team) FROM match_season",
    "from": "spider"
  },
  {
    "question": "Question: Show the players and the years played. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Player ,  Years_Played FROM player",
    "from": "spider"
  },
  {
    "question": "Question: Who are the different players and how many years has each played? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Player ,  Years_Played FROM player",
    "from": "spider"
  },
  {
    "question": "Question: Show all team names. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Name FROM Team",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all teams? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Name FROM Team",
    "from": "spider"
  },
  {
    "question": "Question: Show the season, the player, and the name of the country that player belongs to. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
    "from": "spider"
  },
  {
    "question": "Question: For each player, what are their name, season, and country that they belong to? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
    "from": "spider"
  },
  {
    "question": "Question: Which players are from Indonesia? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
    "from": "spider"
  },
  {
    "question": "Question: Who are the players from Indonesia? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct positions of the players from a country whose capital is Dublin? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
    "from": "spider"
  },
  {
    "question": "Question: Give the different positions of players who play for the country with the capital Dublin. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the official languages of the countries of players from Maryland or Duke college? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the official native languages of countries who have players from Maryland or Duke colleges. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct official languages are there among countries of players whose positions are defenders. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of different official languages corresponding to countries that players who play Defender are from. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the season, the player, and the name of the team that players belong to. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
    "from": "spider"
  },
  {
    "question": "Question: Who are the different players, what season do they play in, and what is the name of the team they are on? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
    "from": "spider"
  },
  {
    "question": "Question: Show the positions of the players from the team with name \"Ryley Goldner\". | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the positions of players on the team Ryley Goldner. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct colleges are associated with players from the team with name \"Columbus Crew\". | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of different colleges that players who play for Columbus Crew are from. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the players and years played for players from team \"Columbus Crew\". | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the players who played for Columbus Crew, and how many years did each play for? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the position of players and the corresponding number of players. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
    "from": "spider"
  },
  {
    "question": "Question: How many players played each position? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
    "from": "spider"
  },
  {
    "question": "Question: Show the country names and the corresponding number of players. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
    "from": "spider"
  },
  {
    "question": "Question: How many players are from each country? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
    "from": "spider"
  },
  {
    "question": "Question: Return all players sorted by college in ascending alphabetical order. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT player FROM match_season ORDER BY College ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are all the players who played in match season, sorted by college in ascending alphabetical order? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT player FROM match_season ORDER BY College ASC",
    "from": "spider"
  },
  {
    "question": "Question: Show the most common position of players in match seasons. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the position that is most common among players in match seasons? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the top 3 most common colleges of players in match seasons. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What are the three colleges from which the most players are from? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: Show the name of colleges that have at least two players. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all colleges that have two or more players? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: Show the name of colleges that have at least two players in descending alphabetical order. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of colleges that have two or more players, listed in descending alphabetical order? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of teams that do no have match season record? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
    "from": "spider"
  },
  {
    "question": "Question: Return the names of teams that have no match season record. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of countries that have both players with position forward and players with position defender? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
    "from": "spider"
  },
  {
    "question": "Question: Which college have both players with position midfielder and players with position defender? | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position. | Tables: country, team, match_season, player | Columns: country.Country_id, country.Country_name, country.Capital, country.Official_native_language, team.Team_id, team.Name, match_season.Season, match_season.Player, match_season.Position, match_season.Country, match_season.Team, match_season.Draft_Pick_Number, match_season.Draft_Class, match_season.College, player.Player_ID, player.Player, player.Years_Played, player.Total_WL, player.Singles_WL, player.Doubles_WL, player.Team What is the SQL query?",
    "answer": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
    "from": "spider"
  },
  {
    "question": "Question: How many climbers are there? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT count(*) FROM climber",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of climbers. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT count(*) FROM climber",
    "from": "spider"
  },
  {
    "question": "Question: List the names of climbers in descending order of points. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM climber ORDER BY Points DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the climbers, ordered by points descending? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM climber ORDER BY Points DESC",
    "from": "spider"
  },
  {
    "question": "Question: List the names of climbers whose country is not Switzerland. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of climbers who are not from the country of Switzerland? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the maximum point for climbers whose country is United Kingdom? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the maximum number of points for climbers from the United Kingdom. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct countries are the climbers from? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT COUNT(DISTINCT Country) FROM climber",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of different countries that climbers are from. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT COUNT(DISTINCT Country) FROM climber",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of mountains in ascending alphabetical order? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM mountain ORDER BY Name ASC",
    "from": "spider"
  },
  {
    "question": "Question: Give the names of mountains in alphabetical order. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM mountain ORDER BY Name ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the countries of mountains with height bigger than 5000? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Country FROM mountain WHERE Height  >  5000",
    "from": "spider"
  },
  {
    "question": "Question: Return the countries of the mountains that have a height larger than 5000. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Country FROM mountain WHERE Height  >  5000",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the highest mountain? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the name of the mountain with the greatest height. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the distinct ranges of the mountains with the top 3 prominence. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What are the different ranges of the 3 mountains with the highest prominence? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: Show names of climbers and the names of mountains they climb. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of climbers and the corresponding names of mountains that they climb? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of climbers and the heights of mountains they climb. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of climbers and the corresponding heights of the mountains that they climb? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
    "from": "spider"
  },
  {
    "question": "Question: Show the height of the mountain climbed by the climber with the maximum points. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the height of the mountain climbined by the climbing who had the most points? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the distinct names of mountains climbed by climbers from country \"West Germany\". | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the different names of mountains ascended by climbers from the country of West Germany? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the times used by climbers to climb mountains in Country Uganda. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the times used by climbers who climbed mountains in the country of Uganda? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
    "from": "spider"
  },
  {
    "question": "Question: Please show the countries and the number of climbers from each country. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
    "from": "spider"
  },
  {
    "question": "Question: How many climbers are from each country? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
    "from": "spider"
  },
  {
    "question": "Question: List the countries that have more than one mountain. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Which countries have more than one mountain? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: List the names of mountains that do not have any climber. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of countains that no climber has climbed? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
    "from": "spider"
  },
  {
    "question": "Question: Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
    "from": "spider"
  },
  {
    "question": "Question: What are the countries that have both mountains that are higher than 5600 and lower than 5200? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
    "from": "spider"
  },
  {
    "question": "Question: Show the range that has the most number of mountains. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which range contains the most mountains? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of mountains with height more than 5000 or prominence more than 1000. | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of mountains that have a height of over 5000 or a prominence of over 1000? | Tables: mountain, climber | Columns: mountain.Mountain_ID, mountain.Name, mountain.Height, mountain.Prominence, mountain.Range, mountain.Country, climber.Climber_ID, climber.Name, climber.Country, climber.Time, climber.Points, climber.Mountain_ID What is the SQL query?",
    "answer": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
    "from": "spider"
  },
  {
    "question": "Question: How many body builders are there? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT count(*) FROM body_builder",
    "from": "spider"
  },
  {
    "question": "Question: List the total scores of body builders in ascending order. | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Total FROM body_builder ORDER BY Total ASC",
    "from": "spider"
  },
  {
    "question": "Question: List the snatch score and clean jerk score of body builders in ascending order of snatch score. | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
    "from": "spider"
  },
  {
    "question": "Question: What is the average snatch score of body builders? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT avg(Snatch) FROM body_builder",
    "from": "spider"
  },
  {
    "question": "Question: What are the clean and jerk score of the body builder with the highest total score? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the birthdays of people in ascending order of height? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Birth_Date FROM People ORDER BY Height ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of body builders? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of body builders whose total score is higher than 300? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the body builder with the greatest body weight? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the birth date and birth place of the body builder with the highest total points? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the heights of body builders with total score smaller than 315? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315",
    "from": "spider"
  },
  {
    "question": "Question: What is the average total score of body builders with height bigger than 200? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of body builders in descending order of total scores? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
    "from": "spider"
  },
  {
    "question": "Question: List each birth place along with the number of people from there. | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",
    "from": "spider"
  },
  {
    "question": "Question: What is the most common birth place of people? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the birth places that are shared by at least two people? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: List the height and weight of people in descending order of height. | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
    "from": "spider"
  },
  {
    "question": "Question: Show all information about each body builder. | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT * FROM body_builder",
    "from": "spider"
  },
  {
    "question": "Question: List the names and origins of people who are not body builders. | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct birth places are there? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT count(DISTINCT Birth_Place) FROM people",
    "from": "spider"
  },
  {
    "question": "Question: How many persons are not body builders? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
    "from": "spider"
  },
  {
    "question": "Question: List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200. | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;",
    "from": "spider"
  },
  {
    "question": "Question: What are the total scores of the body builders whose birthday contains the string \"January\" ? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the minimum snatch score? | Tables: body_builder, people | Columns: body_builder.Body_Builder_ID, body_builder.People_ID, body_builder.Snatch, body_builder.Clean_Jerk, body_builder.Total, people.People_ID, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place What is the SQL query?",
    "answer": "SELECT min(snatch) FROM body_builder",
    "from": "spider"
  },
  {
    "question": "Question: How many elections are there? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT count(*) FROM election",
    "from": "spider"
  },
  {
    "question": "Question: List the votes of elections in descending order. | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Votes FROM election ORDER BY Votes DESC",
    "from": "spider"
  },
  {
    "question": "Question: List the dates and vote percents of elections. | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Date ,  Vote_Percent FROM election",
    "from": "spider"
  },
  {
    "question": "Question: What are the minimum and maximum vote percents of elections? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and parties of representatives? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Name ,  Party FROM representative",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of representatives whose party is not \"Republican\"? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the life spans of representatives from New York state or Indiana state? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of representatives and the dates of elections they participated in. | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of representatives with more than 10000 votes in election? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of representatives in descending order of votes? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC",
    "from": "spider"
  },
  {
    "question": "Question: What is the party of the representative that has the smallest number of votes. | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the lifespans of representatives in descending order of vote percent? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC",
    "from": "spider"
  },
  {
    "question": "Question: What is the average number of votes of representatives from party \"Republican\"? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the different parties of representative? Show the party name and the number of representatives in each party. | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",
    "from": "spider"
  },
  {
    "question": "Question: What is the party that has the largest number of representatives? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What parties have at least three representatives? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3",
    "from": "spider"
  },
  {
    "question": "Question: What states have at least two representatives? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: List the names of representatives that have not participated in elections listed here. | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
    "from": "spider"
  },
  {
    "question": "Question: Show the parties that have both representatives in New York state and representatives in Pennsylvania state. | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct parties are there for representatives? | Tables: election, representative | Columns: election.Election_ID, election.Representative_ID, election.Date, election.Votes, election.Vote_Percent, election.Seats, election.Place, representative.Representative_ID, representative.Name, representative.State, representative.Party, representative.Lifespan What is the SQL query?",
    "answer": "SELECT count(DISTINCT Party) FROM representative",
    "from": "spider"
  },
  {
    "question": "Question: How many apartment bookings are there in total? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT count(*) FROM Apartment_Bookings",
    "from": "spider"
  },
  {
    "question": "Question: Count the total number of apartment bookings. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT count(*) FROM Apartment_Bookings",
    "from": "spider"
  },
  {
    "question": "Question: Show the start dates and end dates of all the apartment bookings. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
    "from": "spider"
  },
  {
    "question": "Question: What are the start date and end date of each apartment booking? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
    "from": "spider"
  },
  {
    "question": "Question: Show all distinct building descriptions. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT DISTINCT building_description FROM Apartment_Buildings",
    "from": "spider"
  },
  {
    "question": "Question: Give me a list of all the distinct building descriptions. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT DISTINCT building_description FROM Apartment_Buildings",
    "from": "spider"
  },
  {
    "question": "Question: Show the short names of the buildings managed by \"Emma\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
    "from": "spider"
  },
  {
    "question": "Question: Which buildings does \"Emma\" manage? Give me the short names of the buildings. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the addresses and phones of all the buildings managed by \"Brenden\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the address and phone number of the buildings managed by \"Brenden\"? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the building full names that contain the word \"court\"? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
    "from": "spider"
  },
  {
    "question": "Question: Find all the building full names containing the word \"court\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the minimum and maximum number of bathrooms of all the apartments? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
    "from": "spider"
  },
  {
    "question": "Question: Give me the minimum and maximum bathroom count among all the apartments. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
    "from": "spider"
  },
  {
    "question": "Question: What is the average number of bedrooms of all apartments? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT avg(bedroom_count) FROM Apartments",
    "from": "spider"
  },
  {
    "question": "Question: Find the average number of bedrooms of all the apartments. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT avg(bedroom_count) FROM Apartments",
    "from": "spider"
  },
  {
    "question": "Question: Return the apartment number and the number of rooms for each apartment. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_number ,  room_count FROM Apartments",
    "from": "spider"
  },
  {
    "question": "Question: What are the apartment number and the room count of each apartment? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_number ,  room_count FROM Apartments",
    "from": "spider"
  },
  {
    "question": "Question: What is the average number of rooms of apartments with type code \"Studio\"? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the average room count of the apartments that have the \"Studio\" type code. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the apartment numbers of the apartments with type code \"Flat\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
    "from": "spider"
  },
  {
    "question": "Question: Which apartments have type code \"Flat\"? Give me their apartment numbers. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the first names and last names of all guests | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT guest_first_name ,  guest_last_name FROM Guests",
    "from": "spider"
  },
  {
    "question": "Question: What are the first names and last names of all the guests? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT guest_first_name ,  guest_last_name FROM Guests",
    "from": "spider"
  },
  {
    "question": "Question: Return the date of birth for all the guests with gender code \"Male\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
    "from": "spider"
  },
  {
    "question": "Question: What are dates of birth of all the guests whose gender is \"Male\"? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the apartment numbers, start dates, and end dates of all the apartment bookings. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the apartment number, start date, and end date of each apartment booking? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the booking start and end dates of the apartments with type code \"Duplex\"? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the booking start date and end date for the apartments that have type code \"Duplex\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the booking start and end dates of the apartments with more than 2 bedrooms? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
    "from": "spider"
  },
  {
    "question": "Question: Find the booking start date and end date for the apartments that have more than two bedrooms. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
    "from": "spider"
  },
  {
    "question": "Question: What is the booking status code of the apartment with apartment number \"Suite 634\"? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
    "from": "spider"
  },
  {
    "question": "Question: Tell me the booking status code for the apartment with number \"Suite 634\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
    "from": "spider"
  },
  {
    "question": "Question: Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the average room count of the apartments that have booking status code \"Provisional\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average room count of the apartments whose booking status code is \"Provisional\"? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the guest first names, start dates, and end dates of all the apartment bookings. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the guest first name, start date, and end date of each apartment booking? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
    "from": "spider"
  },
  {
    "question": "Question: Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
    "from": "spider"
  },
  {
    "question": "Question: Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the facility codes of apartments with more than 4 bedrooms. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
    "from": "spider"
  },
  {
    "question": "Question: What are the facility codes of the apartments with more than four bedrooms? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
    "from": "spider"
  },
  {
    "question": "Question: Show the total number of rooms of all apartments with facility code \"Gym\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the total number of rooms in the apartments that have facility code \"Gym\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the total number of rooms of the apartments in the building with short name \"Columbus Square\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
    "from": "spider"
  },
  {
    "question": "Question: How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the addresses of the buildings that have apartments with more than 2 bathrooms. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
    "from": "spider"
  },
  {
    "question": "Question: Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
    "from": "spider"
  },
  {
    "question": "Question: Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\". | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
    "from": "spider"
  },
  {
    "question": "Question: What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the booking status code and the corresponding number of bookings. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
    "from": "spider"
  },
  {
    "question": "Question: How many bookings does each booking status have? List the booking status code and the number of corresponding bookings. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
    "from": "spider"
  },
  {
    "question": "Question: Return all the apartment numbers sorted by the room count in ascending order. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
    "from": "spider"
  },
  {
    "question": "Question: Sort the apartment numbers in ascending order of room count. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
    "from": "spider"
  },
  {
    "question": "Question: Return the apartment number with the largest number of bedrooms. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the apartment number of the apartment with the most beds? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
    "from": "spider"
  },
  {
    "question": "Question: Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
    "from": "spider"
  },
  {
    "question": "Question: Show the top 3 apartment type codes sorted by the average number of rooms in descending order. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What are the top three apartment types in terms of the average room count? Give me the | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the most common apartment type code. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which apartment type code appears the most often? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the most common apartment type code among apartments with more than 1 bathroom. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which apartment type code is the most common among apartments with more than one bathroom? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show each apartment type code, and the maximum and minimum number of rooms for each type. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
    "from": "spider"
  },
  {
    "question": "Question: Return each apartment type code along with the maximum and minimum number of rooms among each type. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
    "from": "spider"
  },
  {
    "question": "Question: Show each gender code and the corresponding count of guests sorted by the count in descending order. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
    "from": "spider"
  },
  {
    "question": "Question: Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
    "from": "spider"
  },
  {
    "question": "Question: How many apartments do not have any facility? | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of apartments that have no facility. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
    "from": "spider"
  },
  {
    "question": "Question: Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\" | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
    "from": "spider"
  },
  {
    "question": "Question: Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the apartment numbers of apartments with unit status availability of both 0 and 1. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
    "from": "spider"
  },
  {
    "question": "Question: Which apartments have unit status availability of both 0 and 1? Return their apartment numbers. | Tables: Apartment_Buildings, Apartments, Apartment_Facilities, Guests, Apartment_Bookings, View_Unit_Status | Columns: Apartment_Buildings.building_id, Apartment_Buildings.building_short_name, Apartment_Buildings.building_full_name, Apartment_Buildings.building_description, Apartment_Buildings.building_address, Apartment_Buildings.building_manager, Apartment_Buildings.building_phone, Apartments.apt_id, Apartments.building_id, Apartments.apt_type_code, Apartments.apt_number, Apartments.bathroom_count, Apartments.bedroom_count, Apartments.room_count, Apartment_Facilities.apt_id, Apartment_Facilities.facility_code, Guests.guest_id, Guests.gender_code, Guests.guest_first_name, Guests.guest_last_name, Guests.date_of_birth, Apartment_Bookings.apt_booking_id, Apartment_Bookings.apt_id, Apartment_Bookings.guest_id, Apartment_Bookings.booking_status_code, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date, View_Unit_Status.apt_id, View_Unit_Status.apt_booking_id, View_Unit_Status.status_date What is the SQL query?",
    "answer": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
    "from": "spider"
  },
  {
    "question": "Question: How many games are held after season 2007? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT count(*) FROM game WHERE season  >  2007",
    "from": "spider"
  },
  {
    "question": "Question: List the dates of games by the home team name in descending order. | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT Date FROM game ORDER BY home_team DESC",
    "from": "spider"
  },
  {
    "question": "Question: List the season, home team, away team of all the games. | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT season ,  home_team ,  away_team FROM game",
    "from": "spider"
  },
  {
    "question": "Question: What are the maximum, minimum and average home games each stadium held? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium",
    "from": "spider"
  },
  {
    "question": "Question: What is the average attendance of stadiums with capacity percentage higher than 100%? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100",
    "from": "spider"
  },
  {
    "question": "Question: What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
    "from": "spider"
  },
  {
    "question": "Question: What is the season of the game which causes the player 'Walter Samuel' to get injured? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids, scores, and dates of the games which caused at least two injury accidents? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the id and name of the stadium where the most injury accidents happened? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the id and name of the stadium where the largest number of injury accidents occurred. | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
    "from": "spider"
  },
  {
    "question": "Question: How many different kinds of information sources are there for injury accidents? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
    "from": "spider"
  },
  {
    "question": "Question: How many games are free of injury accidents? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct kinds of injuries happened after season 2010? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
    "from": "spider"
  },
  {
    "question": "Question: List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured. | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
    "from": "spider"
  },
  {
    "question": "Question: Show the name, average attendance, total attendance for stadiums where no accidents happened. | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id",
    "from": "spider"
  },
  {
    "question": "Question: Which stadium name contains the substring \"Bank\"? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
    "from": "spider"
  },
  {
    "question": "Question: How many games has each stadium held? | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id",
    "from": "spider"
  },
  {
    "question": "Question: For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season. | Tables: stadium, game, injury_accident | Columns: stadium.id, stadium.name, stadium.Home_Games, stadium.Average_Attendance, stadium.Total_Attendance, stadium.Capacity_Percentage, game.stadium_id, game.id, game.Season, game.Date, game.Home_team, game.Away_team, game.Score, game.Competition, injury_accident.game_id, injury_accident.id, injury_accident.Player, injury_accident.Injury, injury_accident.Number_of_matches, injury_accident.Source What is the SQL query?",
    "answer": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
    "from": "spider"
  },
  {
    "question": "Question: List all country and league names. | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
    "from": "spider"
  },
  {
    "question": "Question: How many leagues are there in England? | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average weight of all players? | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT avg(weight) FROM Player",
    "from": "spider"
  },
  {
    "question": "Question: What is the maximum and minimum height of all players? | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT max(weight) ,  min(weight) FROM Player",
    "from": "spider"
  },
  {
    "question": "Question: List all player names who have an overall rating higher than the average. | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of players who have the best dribbling? | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
    "from": "spider"
  },
  {
    "question": "Question: List the names of all players who have a crossing score higher than 90 and prefer their right foot. | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
    "from": "spider"
  },
  {
    "question": "Question: List the names of all left-footed players who have overall rating between 85 and 90. | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
    "from": "spider"
  },
  {
    "question": "Question: What is the average rating for right-footed players and left-footed players? | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
    "from": "spider"
  },
  {
    "question": "Question: Of all players with an overall rating greater than 80, how many are right-footed and left-footed? | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
    "from": "spider"
  },
  {
    "question": "Question: List all of the player ids with a height of at least 180cm and an overall rating higher than 85. | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
    "from": "spider"
  },
  {
    "question": "Question: List all of the ids for left-footed players with a height between 180cm and 190cm. | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
    "from": "spider"
  },
  {
    "question": "Question: Who are the top 3 players in terms of overall rating? | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: List the names and birthdays of the top five players in terms of potential. | Tables: Player_Attributes, sqlite_sequence, Player, League, Country, Team, Team_Attributes | Columns: Player_Attributes.id, Player_Attributes.player_fifa_api_id, Player_Attributes.player_api_id, Player_Attributes.date, Player_Attributes.overall_rating, Player_Attributes.potential, Player_Attributes.preferred_foot, Player_Attributes.attacking_work_rate, Player_Attributes.defensive_work_rate, Player_Attributes.crossing, Player_Attributes.finishing, Player_Attributes.heading_accuracy, Player_Attributes.short_passing, Player_Attributes.volleys, Player_Attributes.dribbling, Player_Attributes.curve, Player_Attributes.free_kick_accuracy, Player_Attributes.long_passing, Player_Attributes.ball_control, Player_Attributes.acceleration, Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.reactions, Player_Attributes.balance, Player_Attributes.shot_power, Player_Attributes.jumping, Player_Attributes.stamina, Player_Attributes.strength, Player_Attributes.long_shots, Player_Attributes.aggression What is the SQL query?",
    "answer": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
    "from": "spider"
  },
  {
    "question": "Question: How many performances are there? | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT count(*) FROM performance",
    "from": "spider"
  },
  {
    "question": "Question: List the hosts of performances in ascending order of attendance. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT HOST FROM performance ORDER BY Attendance ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the dates and locations of performances? | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT Date ,  LOCATION FROM performance",
    "from": "spider"
  },
  {
    "question": "Question: Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\" | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average number of attendees for performances? | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT avg(Attendance) FROM performance",
    "from": "spider"
  },
  {
    "question": "Question: What is the date of the performance with the highest number of attendees? | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show different locations and the number of performances at each location. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION",
    "from": "spider"
  },
  {
    "question": "Question: Show the most common location of performances. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the locations that have at least two performances. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of members and the location of the performances they attended. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of members and the location of performances they attended in ascending alphabetical order of their names. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
    "from": "spider"
  },
  {
    "question": "Question: Show the dates of performances with attending members whose roles are \"Violin\". | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of members and the dates of performances they attended in descending order of attendance of the performances. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC",
    "from": "spider"
  },
  {
    "question": "Question: List the names of members who did not attend any performance. | Tables: member, performance, member_attendance | Columns: member.Member_ID, member.Name, member.Nationality, member.Role, performance.Performance_ID, performance.Date, performance.Host, performance.Location, performance.Attendance, member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces What is the SQL query?",
    "answer": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)",
    "from": "spider"
  },
  {
    "question": "Question: Find the buildings which have rooms with capacity more than 50. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct buildings with capacities of greater than 50? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of rooms that are not in the Lamberton building. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
    "from": "spider"
  },
  {
    "question": "Question: How many classrooms are not in Lamberton? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
    "from": "spider"
  },
  {
    "question": "Question: What is the name and building of the departments whose budget is more than the average budget? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
    "from": "spider"
  },
  {
    "question": "Question: Give the name and building of the departments with greater than average budget. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
    "from": "spider"
  },
  {
    "question": "Question: Find the room number of the rooms which can sit 50 to 100 students and their buildings. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
    "from": "spider"
  },
  {
    "question": "Question: What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and building of the department with the highest budget. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the department name and corresponding building for the department with the greatest budget? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the student who has the highest total credits in the History department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Give the name of the student in the History department with the most credits. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many rooms does the Lamberton building have? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of classrooms in Lamberton. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
    "from": "spider"
  },
  {
    "question": "Question: How many students have advisors? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(DISTINCT s_id) FROM advisor",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of students who have advisors. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(DISTINCT s_id) FROM advisor",
    "from": "spider"
  },
  {
    "question": "Question: How many departments offer courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(DISTINCT dept_name) FROM course",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of departments which offer courses. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(DISTINCT dept_name) FROM course",
    "from": "spider"
  },
  {
    "question": "Question: How many different courses offered by Physics department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of courses in the Physics department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
    "from": "spider"
  },
  {
    "question": "Question: Find the title of courses that have two prerequisites? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles for courses with two prerequisites? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
    "from": "spider"
  },
  {
    "question": "Question: Find the title, credit, and department name of courses that have more than one prerequisites? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: What is the title, credit value, and department name for courses with more than one prerequisite? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: How many courses that do not have prerequisite? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of courses without prerequisites. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the courses that do not have any prerequisite? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of courses without prerequisites? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "from": "spider"
  },
  {
    "question": "Question: How many different instructors have taught some course? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT COUNT (DISTINCT id) FROM teaches",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of distinct instructors who have taught a course. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT COUNT (DISTINCT id) FROM teaches",
    "from": "spider"
  },
  {
    "question": "Question: Find the total budgets of the Marketing or Finance department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
    "from": "spider"
  },
  {
    "question": "Question: What is the sum of budgets of the Marketing and Finance departments? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
    "from": "spider"
  },
  {
    "question": "Question: Find the department name of the instructor whose name contains 'Soisalon'. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the department with an instructure who has a name like 'Soisalon'? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
    "from": "spider"
  },
  {
    "question": "Question: How many rooms whose capacity is less than 50 does the Lamberton building have? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of rooms in Lamberton with capacity lower than 50. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and budget of departments whose budgets are more than the average budget. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and budgets of departments with budgets greater than the average? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
    "from": "spider"
  },
  {
    "question": "Question: what is the name of the instructor who is in Statistics department and earns the lowest salary? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Give the name of the lowest earning instructor in the Statistics department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the title of course that is provided by both Statistics and Psychology departments. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'",
    "from": "spider"
  },
  {
    "question": "Question: What is the title of a course that is listed in both the Statistics and Psychology departments? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'",
    "from": "spider"
  },
  {
    "question": "Question: Find the title of course that is provided by Statistics but not Psychology departments. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of courses that are in the Statistics department but not the Psychology department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
    "from": "spider"
  },
  {
    "question": "Question: Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of students who took any class in the years of 2009 and 2010. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the students who took classes in 2009 or 2010? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of the top 3 departments that provide the largest amount of courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the 3 departments with the most courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the department that offers the highest total credits? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the department with the most credits? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the names of all courses ordered by their titles and credits. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course ORDER BY title ,  credits",
    "from": "spider"
  },
  {
    "question": "Question: Given the titles of all courses, in order of titles and credits. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course ORDER BY title ,  credits",
    "from": "spider"
  },
  {
    "question": "Question: Which department has the lowest budget? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Give the name of the department with the lowest budget. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the names and buildings of all departments sorted by the budget from large to small. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and buildings of the deparments, sorted by budget descending? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
    "from": "spider"
  },
  {
    "question": "Question: Who is the instructor with the highest salary? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Give the name of the highest paid instructor. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the information of all instructors ordered by their salary in ascending order. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT * FROM instructor ORDER BY salary",
    "from": "spider"
  },
  {
    "question": "Question: Give all information regarding instructors, in order of salary from least to greatest. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT * FROM instructor ORDER BY salary",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the students and their department names sorted by their total credits in ascending order. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of students and their respective departments, ordered by number of credits from least to greatest? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
    "from": "spider"
  },
  {
    "question": "Question: list in alphabetic order all course names and their instructors' names in year 2008. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
    "from": "spider"
  },
  {
    "question": "Question: Show all titles and their instructors' names for courses in 2008, in alphabetical order by title. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of instructors who are advising more than one student. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of instructors who advise more than one student? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the students who have more than one advisor? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of students who have more than one advisor? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of rooms with more than 50 capacity for each building. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
    "from": "spider"
  },
  {
    "question": "Question: How many rooms in each building have a capacity of over 50? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
    "from": "spider"
  },
  {
    "question": "Question: Find the maximum and average capacity among rooms in each building. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
    "from": "spider"
  },
  {
    "question": "Question: What are the greatest and average capacity for rooms in each building? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
    "from": "spider"
  },
  {
    "question": "Question: Find the title of the course that is offered by more than one department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of courses that are offered in more than one department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Find the total credits of courses provided by different department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
    "from": "spider"
  },
  {
    "question": "Question: How many total credits are offered by each department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
    "from": "spider"
  },
  {
    "question": "Question: Find the minimum salary for the departments whose average salary is above the average payment of all instructors. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
    "from": "spider"
  },
  {
    "question": "Question: What is the lowest salary in departments with average salary greater than the overall average. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of courses provided in each semester and year. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
    "from": "spider"
  },
  {
    "question": "Question: How many courses are provided in each semester and year? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
    "from": "spider"
  },
  {
    "question": "Question: Find the year which offers the largest number of courses. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which year had the greatest number of courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the year and semester when offers the largest number of courses. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the year and semester with the most courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of department has the highest amount of students? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the deparment with the highest enrollment? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the total number of students in each department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
    "from": "spider"
  },
  {
    "question": "Question: How many students are in each department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
    "from": "spider"
  },
  {
    "question": "Question: Find the semester and year which has the least number of student taking any class. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which semeseter and year had the fewest students? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of the instructor who advises of all students from History department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
    "from": "spider"
  },
  {
    "question": "Question: Give id of the instructor who advises students in the History department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and salary of the instructors who are advisors of any student from History department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and salaries of instructors who advises students in the History department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
    "from": "spider"
  },
  {
    "question": "Question: Find the id of the courses that do not have any prerequisite? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of courses without prerequisites? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the courses that do not have any prerequisite? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of courses without prerequisites? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
    "from": "spider"
  },
  {
    "question": "Question: What is the title of the prerequisite class of International Finance course? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
    "from": "spider"
  },
  {
    "question": "Question: Give the title of the prerequisite to the course International Finance. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
    "from": "spider"
  },
  {
    "question": "Question: Find the title of course whose prerequisite is course Differential Geometry. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
    "from": "spider"
  },
  {
    "question": "Question: What is the title of the course with Differential Geometry as a prerequisite? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of students who have taken any course in the fall semester of year 2003. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of students who took a course in the Fall of 2003? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
    "from": "spider"
  },
  {
    "question": "Question: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: Give the title of the course offered in Chandler during the Fall of 2010. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the instructors who taught C Programming course before. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of instructors who have taught C Programming courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and salary of instructors who are advisors of the students from the Math department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and salaries of instructors who advise students in the Math department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all instructors who advise students in the math depart sorted by total credits of the student. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
    "from": "spider"
  },
  {
    "question": "Question: What is the course title of the prerequisite of course Mobile Computing? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
    "from": "spider"
  },
  {
    "question": "Question: What is the title of the course that is a prerequisite for Mobile Computing? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of instructor who is the advisor of the student who has the highest number of total credits. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the instructor who advises the student with the greatest number of total credits? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of instructors who didn't teach any courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of instructors who didn't teach? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
    "from": "spider"
  },
  {
    "question": "Question: Find the id of instructors who didn't teach any courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of instructors who didnt' teach? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of instructors who didn't each any courses in any Spring semester. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of instructors who didn't teach courses in the Spring? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the department which has the highest average salary of professors. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which department has the highest average instructor salary? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the number and averaged salary of all instructors who are in the department with the highest budget. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many instructors are in the department with the highest budget, and what is their average salary? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
    "from": "spider"
  },
  {
    "question": "Question: Give the title and credits for the course that is taught in the classroom with the greatest capacity. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of students who didn't take any course from Biology department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of students who haven't taken any Biology courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
    "from": "spider"
  },
  {
    "question": "Question: Find the total number of students and total number of instructors for each department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
    "from": "spider"
  },
  {
    "question": "Question: How many students and instructors are in each department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of students who have taken the prerequisite course of the course with title International Finance. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of students who have taken the prerequisite for the course International Finance? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of students who took some course offered by Statistics department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of students who have taken Statistics courses? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
    "from": "spider"
  },
  {
    "question": "Question: Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
    "from": "spider"
  },
  {
    "question": "Question: What are the building, room number, semester and year of courses in the Psychology department, sorted using course title? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all instructors in computer science department | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all instructors in the Comp. Sci. department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all instructors in Comp. Sci. department with salary > 80000. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the instructors in the Comp. Sci. department who earn more than 80000? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all instructors who have taught some course and the course_id. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all instructors who have taught a course, as well as the corresponding course id? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all instructors in the Art department who have taught some course and the course_id. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of Art instructors who have taught a course, and the corresponding course id? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all instructors whose name includes the substring “dar”. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all instructors with names that include \"dar\"? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
    "from": "spider"
  },
  {
    "question": "Question: List in alphabetic order the names of all distinct instructors. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT DISTINCT name FROM  instructor ORDER BY name",
    "from": "spider"
  },
  {
    "question": "Question: List the distinct names of the instructors, ordered by name. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT DISTINCT name FROM  instructor ORDER BY name",
    "from": "spider"
  },
  {
    "question": "Question: Find courses that ran in Fall 2009 or in Spring 2010. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids for courses in the Fall of 2009 or the Spring of 2010? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: Find courses that ran in Fall 2009 and in Spring 2010. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: Find courses that ran in Fall 2009 but not in Spring 2010. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: Find the salaries of all distinct instructors that are less than the largest salary. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct salaries of all instructors who earned less than the maximum salary? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
    "from": "spider"
  },
  {
    "question": "Question: Find the total number of instructors who teach a course in the Spring 2010 semester. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: How many instructors teach a course in the Spring of 2010? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
    "from": "spider"
  },
  {
    "question": "Question: Find the names and average salaries of all departments whose average salary is greater than 42000. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and average salaries for departments with average salary higher than 42000? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
    "from": "spider"
  },
  {
    "question": "Question: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of instructors who earn more than at least one instructor from the Biology department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? | Tables: classroom, department, course, instructor, section, teaches, student, takes, advisor, time_slot, prereq | Columns: classroom.building, classroom.room_number, classroom.capacity, department.dept_name, department.building, department.budget, course.course_id, course.title, course.dept_name, course.credits, instructor.ID, instructor.name, instructor.dept_name, instructor.salary, section.course_id, section.sec_id, section.semester, section.year, section.building, section.room_number, section.time_slot_id, teaches.ID, teaches.course_id, teaches.sec_id, teaches.semester, teaches.year, student.ID, student.name, student.dept_name, student.tot_cred What is the SQL query?",
    "answer": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
    "from": "spider"
  },
  {
    "question": "Question: How many debates are there? | Tables: people, debate, debate_people | Columns: people.People_ID, people.District, people.Name, people.Party, people.Age, debate.Debate_ID, debate.Date, debate.Venue, debate.Num_of_Audience, debate_people.Debate_ID, debate_people.Affirmative, debate_people.Negative, debate_people.If_Affirmative_Win What is the SQL query?",
    "answer": "SELECT count(*) FROM debate",
    "from": "spider"
  },
  {
    "question": "Question: List the venues of debates in ascending order of the number of audience. | Tables: people, debate, debate_people | Columns: people.People_ID, people.District, people.Name, people.Party, people.Age, debate.Debate_ID, debate.Date, debate.Venue, debate.Num_of_Audience, debate_people.Debate_ID, debate_people.Affirmative, debate_people.Negative, debate_people.If_Affirmative_Win What is the SQL query?",
    "answer": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the date and venue of each debate? | Tables: people, debate, debate_people | Columns: people.People_ID, people.District, people.Name, people.Party, people.Age, debate.Debate_ID, debate.Date, debate.Venue, debate.Num_of_Audience, debate_people.Debate_ID, debate_people.Affirmative, debate_people.Negative, debate_people.If_Affirmative_Win What is the SQL query?",
    "answer": "SELECT Date ,  Venue FROM debate",
    "from": "spider"
  },
  {
    "question": "Question: List the dates of debates with number of audience bigger than 150 | Tables: people, debate, debate_people | Columns: people.People_ID, people.District, people.Name, people.Party, people.Age, debate.Debate_ID, debate.Date, debate.Venue, debate.Num_of_Audience, debate_people.Debate_ID, debate_people.Affirmative, debate_people.Negative, debate_people.If_Affirmative_Win What is the SQL query?",
    "answer": "SELECT Date FROM debate WHERE Num_of_Audience  >  150",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of people aged either 35 or 36. | Tables: people, debate, debate_people | Columns: people.People_ID, people.District, people.Name, people.Party, people.Age, debate.Debate_ID, debate.Date, debate.Venue, debate.Num_of_Audience, debate_people.Debate_ID, debate_people.Affirmative, debate_people.Negative, debate_people.If_Affirmative_Win What is the SQL query?",
    "answer": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
    "from": "spider"
  },
  {
    "question": "Question: What is the party of the youngest people? | Tables: people, debate, debate_people | Columns: people.People_ID, people.District, people.Name, people.Party, people.Age, debate.Debate_ID, debate.Date, debate.Venue, debate.Num_of_Audience, debate_people.Debate_ID, debate_people.Affirmative, debate_people.Negative, debate_people.If_Affirmative_Win What is the SQL query?",
    "answer": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show different parties of people along with the number of people in each party. | Tables: people, debate, debate_people | Columns: people.People_ID, people.District, people.Name, people.Party, people.Age, debate.Debate_ID, debate.Date, debate.Venue, debate.Num_of_Audience, debate_people.Debate_ID, debate_people.Affirmative, debate_people.Negative, debate_people.If_Affirmative_Win What is the SQL query?",
    "answer": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party",
    "from": "spider"
  },
  {
    "question": "Question: Show the party that has the most people. | Tables: people, debate, debate_people | Columns: people.People_ID, people.District, people.Name, people.Party, people.Age, debate.Debate_ID, debate.Date, debate.Venue, debate.Num_of_Audience, debate_people.Debate_ID, debate_people.Affirmative, debate_people.Negative, debate_people.If_Affirmative_Win What is the SQL query?",
    "answer": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  }
]