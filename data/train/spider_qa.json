[
  {
    "question": "Question: How many heads of the departments are older than 56 ? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT count(*) FROM head WHERE age  >  56",
    "from": "spider"
  },
  {
    "question": "Question: List the name, born state and age of the heads of departments ordered by age. | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
    "from": "spider"
  },
  {
    "question": "Question: List the creation year, name and budget of each department. | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT creation ,  name ,  budget_in_billions FROM department",
    "from": "spider"
  },
  {
    "question": "Question: What are the maximum and minimum budget of the departments? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
    "from": "spider"
  },
  {
    "question": "Question: What is the average number of employees of the departments whose rank is between 10 and 15? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the heads who are born outside the California state? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT name FROM head WHERE born_state != 'California'",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the states where at least 3 heads were born? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
    "from": "spider"
  },
  {
    "question": "Question: In which year were most departments established? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
    "from": "spider"
  },
  {
    "question": "Question: How many acting statuses are there? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT count(DISTINCT temporary_acting) FROM management",
    "from": "spider"
  },
  {
    "question": "Question: How many departments are led by heads who are not mentioned? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct ages of the heads who are acting? | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
    "from": "spider"
  },
  {
    "question": "Question: List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born. | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
    "from": "spider"
  },
  {
    "question": "Question: Which department has more than 1 head at a time? List the id, name and the number of heads. | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Which head's name has the substring 'Ha'? List the id and name. | Tables: department, head, management | Columns: department.Department_ID, department.Name, department.Creation, department.Ranking, department.Budget_in_Billions, department.Num_Employees, head.head_ID, head.name, head.born_state, head.age, management.department_ID, management.head_ID, management.temporary_acting What is the SQL query?",
    "answer": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
    "from": "spider"
  },
  {
    "question": "Question: How many farms are there? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT count(*) FROM farm",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of farms. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT count(*) FROM farm",
    "from": "spider"
  },
  {
    "question": "Question: List the total number of horses on farms in ascending order. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "from": "spider"
  },
  {
    "question": "Question: What is the total horses record for each farm, sorted ascending? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the hosts of competitions whose theme is not \"Aliens\"? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
    "from": "spider"
  },
  {
    "question": "Question: Return the hosts of competitions for which the theme is not Aliens? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
    "from": "spider"
  },
  {
    "question": "Question: What are the themes of farm competitions sorted by year in ascending order? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "from": "spider"
  },
  {
    "question": "Question: Return the themes of farm competitions, sorted by year ascending. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "from": "spider"
  },
  {
    "question": "Question: What is the average number of working horses of farms with more than 5000 total number of horses? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "from": "spider"
  },
  {
    "question": "Question: Give the average number of working horses on farms with more than 5000 total horses. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
    "from": "spider"
  },
  {
    "question": "Question: What are the maximum and minimum number of cows across all farms. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "from": "spider"
  },
  {
    "question": "Question: Return the maximum and minimum number of cows across all farms. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT max(Cows) ,  min(Cows) FROM farm",
    "from": "spider"
  },
  {
    "question": "Question: How many different statuses do cities have? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT count(DISTINCT Status) FROM city",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of different statuses. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT count(DISTINCT Status) FROM city",
    "from": "spider"
  },
  {
    "question": "Question: List official names of cities in descending order of population. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the official names of cities, ordered descending by population? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Official_Name FROM city ORDER BY Population DESC",
    "from": "spider"
  },
  {
    "question": "Question: List the official name and status of the city with the largest population. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the official name and status of the city with the most residents? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the years and the official names of the host cities of competitions. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
    "from": "spider"
  },
  {
    "question": "Question: Give the years and official names of the cities of each competition. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
    "from": "spider"
  },
  {
    "question": "Question: Show the official names of the cities that have hosted more than one competition. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: What are the official names of cities that have hosted more than one competition? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Show the status of the city that has hosted the greatest number of competitions. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the status of the city that has hosted the most competitions? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Please show the themes of competitions with host cities having populations larger than 1000. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
    "from": "spider"
  },
  {
    "question": "Question: What are the themes of competitions that have corresponding host cities with more than 1000 residents? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
    "from": "spider"
  },
  {
    "question": "Question: Please show the different statuses of cities and the average population of cities with each status. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "from": "spider"
  },
  {
    "question": "Question: What are the statuses and average populations of each city? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
    "from": "spider"
  },
  {
    "question": "Question: Please show the different statuses, ordered by the number of cities that have each. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "from": "spider"
  },
  {
    "question": "Question: Return the different statuses of cities, ascending by frequency. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
    "from": "spider"
  },
  {
    "question": "Question: List the most common type of Status across cities. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the most common status across all cities? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the official names of cities that have not held any competition. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
    "from": "spider"
  },
  {
    "question": "Question: What are the official names of cities that have not hosted a farm competition? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
    "from": "spider"
  },
  {
    "question": "Question: Show the status shared by cities with population bigger than 1500 and smaller than 500. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
    "from": "spider"
  },
  {
    "question": "Question: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
    "from": "spider"
  },
  {
    "question": "Question: Find the official names of cities with population bigger than 1500 or smaller than 500. | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
    "from": "spider"
  },
  {
    "question": "Question: What are the official names of cities that have population over 1500 or less than 500? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
    "from": "spider"
  },
  {
    "question": "Question: Show the census ranking of cities whose status are not \"Village\". | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the census rankings of cities that do not have the status \"Village\"? | Tables: city, farm, farm_competition, competition_record | Columns: city.City_ID, city.Official_Name, city.Status, city.Area_km_2, city.Population, city.Census_Ranking, farm.Farm_ID, farm.Year, farm.Total_Horses, farm.Working_Horses, farm.Total_Cattle, farm.Oxen, farm.Bulls, farm.Cows, farm.Pigs, farm.Sheep_and_Goats, farm_competition.Competition_ID, farm_competition.Year, farm_competition.Theme, farm_competition.Host_city_ID, farm_competition.Hosts, competition_record.Competition_ID, competition_record.Farm_ID, competition_record.Rank What is the SQL query?",
    "answer": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
    "from": "spider"
  },
  {
    "question": "Question: which course has most number of registered students? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the course with the most registered students? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: what is id of students who registered some courses but the least number of courses in these students? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the students who registered for some courses but had the least number of courses for all students? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: what are the first name and last name of all candidates? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the first and last names of all the candidates? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
    "from": "spider"
  },
  {
    "question": "Question: List the id of students who never attends courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
    "from": "spider"
  },
  {
    "question": "Question: What are the  ids of every student who has never attended a course? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
    "from": "spider"
  },
  {
    "question": "Question: List the id of students who attended some courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_attendance",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of all students who have attended at least one course? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_attendance",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of all students for courses and what are the names of those courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
    "from": "spider"
  },
  {
    "question": "Question: What is detail of the student who most recently registered course? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What details do we have on the students who registered for courses most recently? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many students attend course English? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
    "from": "spider"
  },
  {
    "question": "Question: How many students are attending English courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
    "from": "spider"
  },
  {
    "question": "Question: How many courses do the student whose id is 171 attend? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
    "from": "spider"
  },
  {
    "question": "Question: How many courses does the student with id 171 actually attend? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
    "from": "spider"
  },
  {
    "question": "Question: Find id of the candidate whose email is stanley.monahan@example.org? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of the candidate whose email is stanley.monahan@example.org? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
    "from": "spider"
  },
  {
    "question": "Question: Find id of the candidate who most recently accessed the course? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of the candidate who most recently accessed the course? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is detail of the student who registered the most number of courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the details of the student who registered for the most number of courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the id of students who registered some courses and the number of their registered courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
    "from": "spider"
  },
  {
    "question": "Question: For every student who is registered for some course, how many courses are they registered for? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
    "from": "spider"
  },
  {
    "question": "Question: How many registed students do each course have? List course name and the number of their registered students? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
    "from": "spider"
  },
  {
    "question": "Question: For each course id, how many students are registered and what are the course names? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
    "from": "spider"
  },
  {
    "question": "Question: Find id of candidates whose assessment code is \"Pass\"? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the candidates that have an outcome code of Pass? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the cell mobile number of the candidates whose assessment code is \"Fail\"? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the id of students who registered course 301? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the students who registered for course 301? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of the student who most recently registered course 301? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the students who registered for course 301 most recently? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find distinct cities of addresses of people? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the different cities where people live? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
    "from": "spider"
  },
  {
    "question": "Question: Find distinct cities of address of students? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the different cities where students live? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
    "from": "spider"
  },
  {
    "question": "Question: List the names of courses in alphabetical order? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT course_name FROM courses ORDER BY course_name",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the courses in alphabetical order? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT course_name FROM courses ORDER BY course_name",
    "from": "spider"
  },
  {
    "question": "Question: List the first names of people in alphabetical order? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT first_name FROM people ORDER BY first_name",
    "from": "spider"
  },
  {
    "question": "Question: What are the first names of the people in alphabetical order? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT first_name FROM people ORDER BY first_name",
    "from": "spider"
  },
  {
    "question": "Question: What are the id of students who registered courses or attended courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the students who either registered or attended a course? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
    "from": "spider"
  },
  {
    "question": "Question: Find the id of courses which are registered or attended by student whose id is 121? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the courses that are registered or attended by the student whose id is 121? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
    "from": "spider"
  },
  {
    "question": "Question: What are all info of students who registered courses but not attended courses? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
    "from": "spider"
  },
  {
    "question": "Question: What are all details of the students who registered but did not attend any course? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
    "from": "spider"
  },
  {
    "question": "Question: List the id of students who registered course statistics in the order of registration date. | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the students who registered course statistics by order of registration date? | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
    "from": "spider"
  },
  {
    "question": "Question: List the id of students who attended  statistics courses in the order of attendance date. | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the students who attended courses in the statistics department in order of attendance date. | Tables: Addresses, People, Students, Courses, People_Addresses, Student_Course_Registrations, Student_Course_Attendance, Candidates, Candidate_Assessments | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, People.person_id, People.first_name, People.middle_name, People.last_name, People.cell_mobile_number, People.email_address, People.login_name, People.password, Students.student_id, Students.student_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, People_Addresses.person_address_id, People_Addresses.person_id, People_Addresses.address_id, People_Addresses.date_from, People_Addresses.date_to, Student_Course_Registrations.student_id, Student_Course_Registrations.course_id, Student_Course_Registrations.registration_date, Student_Course_Attendance.student_id What is the SQL query?",
    "answer": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
    "from": "spider"
  },
  {
    "question": "Question: Give me the dates when the max temperature was higher than 85. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date FROM weather WHERE max_temperature_f  >  85",
    "from": "spider"
  },
  {
    "question": "Question: What are the dates with a maximum temperature higher than 85? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date FROM weather WHERE max_temperature_f  >  85",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of stations that have latitude lower than 37.5? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT name FROM station WHERE lat  <  37.5",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all stations with a latitude smaller than 37.5? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT name FROM station WHERE lat  <  37.5",
    "from": "spider"
  },
  {
    "question": "Question: For each city, return the highest latitude among its stations. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT city ,  max(lat) FROM station GROUP BY city",
    "from": "spider"
  },
  {
    "question": "Question: For each city, what is the highest latitude for its stations? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT city ,  max(lat) FROM station GROUP BY city",
    "from": "spider"
  },
  {
    "question": "Question: Give me the start station and end station for the trips with the three oldest id. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What is the station station and end station for the trips with the three smallest ids? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What is the average latitude and longitude of stations located in San Jose city? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average latitude and longitude in San Jose? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of the trip that has the shortest duration? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id FROM trip ORDER BY duration LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of the shortest trip? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id FROM trip ORDER BY duration LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the total and maximum duration of trips with bike id 636? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
    "from": "spider"
  },
  {
    "question": "Question: What is the total and maximum duration for all trips with the bike id 636? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
    "from": "spider"
  },
  {
    "question": "Question: For each zip code, return the average mean temperature of August there. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
    "from": "spider"
  },
  {
    "question": "Question: For each zip code, what is the average mean temperature for all dates that start with '8'? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
    "from": "spider"
  },
  {
    "question": "Question: From the trip record, find the number of unique bikes. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT count(DISTINCT bike_id) FROM trip",
    "from": "spider"
  },
  {
    "question": "Question: How many different bike ids are there? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT count(DISTINCT bike_id) FROM trip",
    "from": "spider"
  },
  {
    "question": "Question: What is the number of distinct cities the stations are located at? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT count(DISTINCT city) FROM station",
    "from": "spider"
  },
  {
    "question": "Question: How many different cities have these stations? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT count(DISTINCT city) FROM station",
    "from": "spider"
  },
  {
    "question": "Question: How many stations does Mountain View city has? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
    "from": "spider"
  },
  {
    "question": "Question: How many stations are in Mountain View? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the unique name for stations that have ever had 7 bikes available. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
    "from": "spider"
  },
  {
    "question": "Question: What are the different names for each station that has ever had 7 bikes available? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
    "from": "spider"
  },
  {
    "question": "Question: Which start station had the most trips starting from August? Give me the name and id of the station. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the start station's name and id for the one that had the most start trips in August? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which bike traveled the most often in zip code 94002? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of the bike that traveled the most in 94002? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many days had both mean humidity above 50 and mean visibility above 8? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
    "from": "spider"
  },
  {
    "question": "Question: What is the number of days that had an average humity above 50 and an average visibility above 8? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
    "from": "spider"
  },
  {
    "question": "Question: What is the latitude, longitude, city of the station from which the shortest trip started? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the latitude, longitude, and city of the station from which the trip with smallest duration started? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of stations that are located in San Francisco and have average bike availability above 10. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the stations in San Francisco that normally have more than 10 bikes available? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and ids of stations that had more than 14 bikes available on average or were installed in December? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the 3 most common cloud cover rates in the region of zip code 94107? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What are the 3 most common cloud covers in the zip code of 94107? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What is the zip code in which the average mean sea level pressure is the lowest? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the zip code that has the lowest average mean sea level pressure? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the average bike availability in stations that are not located in Palo Alto? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
    "from": "spider"
  },
  {
    "question": "Question: What is the average bike availablility for stations not in Palo Alto? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
    "from": "spider"
  },
  {
    "question": "Question: What is the average longitude of stations that never had bike availability more than 10? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
    "from": "spider"
  },
  {
    "question": "Question: What is the mean longitude for all stations that have never had more than 10 bikes available? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
    "from": "spider"
  },
  {
    "question": "Question: When and in what zip code did max temperature reach 80? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
    "from": "spider"
  },
  {
    "question": "Question: What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
    "from": "spider"
  },
  {
    "question": "Question: Give me ids for all the trip that took place in a zip code area with average mean temperature above 60. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
    "from": "spider"
  },
  {
    "question": "Question: For each zip code, find the ids of all trips that have a higher average mean temperature above 60? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
    "from": "spider"
  },
  {
    "question": "Question: For each zip code, return how many times max wind speed reached 25? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
    "from": "spider"
  },
  {
    "question": "Question: For each zip code, how many times has the maximum wind speed reached 25 mph? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
    "from": "spider"
  },
  {
    "question": "Question: On which day and in which zip code was the min dew point lower than any day in zip code 94107? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
    "from": "spider"
  },
  {
    "question": "Question: Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
    "from": "spider"
  },
  {
    "question": "Question: For each trip, return its ending station's installation date. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
    "from": "spider"
  },
  {
    "question": "Question: What is the installation date for each ending station on all the trips? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
    "from": "spider"
  },
  {
    "question": "Question: Which trip started from the station with the largest dock count? Give me the trip id. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of the trip that started from the station with the highest dock count? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of trips that did not end in San Francisco city. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"",
    "from": "spider"
  },
  {
    "question": "Question: How many trips did not end in San Francisco? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
    "from": "spider"
  },
  {
    "question": "Question: In zip code 94107, on which day neither Fog nor Rain was not observed? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
    "from": "spider"
  },
  {
    "question": "Question: On which day has it neither been foggy nor rained in the zip code of 94107? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of stations that have latitude above 37.4 and never had bike availability below 7? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
    "from": "spider"
  },
  {
    "question": "Question: What are names of stations that have average bike availability above 10 and are not located in San Jose city? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all stations that have more than 10 bikes available and are not located in San Jose? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the name, latitude, and city of the station with the lowest latitude? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name, latitude, and city of the station that is located the furthest South? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: List the name and the number of stations for all the cities that have at least 15 stations. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of every city that has at least 15 stations and how many stations does it have? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
    "from": "spider"
  },
  {
    "question": "Question: Find the ids and names of stations from which at least 200 trips started. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids and names of all start stations that were the beginning of at least 200 trips? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
    "from": "spider"
  },
  {
    "question": "Question: Find the zip code in which the average mean visibility is lower than 10. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
    "from": "spider"
  },
  {
    "question": "Question: For each zip code, select all those that have an average mean visiblity below 10. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
    "from": "spider"
  },
  {
    "question": "Question: List all the cities in a decreasing order of each city's stations' highest latitude. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
    "from": "spider"
  },
  {
    "question": "Question: For each city, list their names in decreasing order by their highest station latitude. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
    "from": "spider"
  },
  {
    "question": "Question: What are the dates that have the 5 highest cloud cover rates and what are the rates? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids and durations of the trips with the top 3 durations? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of the trips that lasted the longest and how long did they last? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: For each station, return its longitude and the average duration of trips that started from the station. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
    "from": "spider"
  },
  {
    "question": "Question: For each start station id, what is its name, longitude and average duration of trips started there? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
    "from": "spider"
  },
  {
    "question": "Question: For each station, find its latitude and the minimum duration of trips that ended at the station. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
    "from": "spider"
  },
  {
    "question": "Question: For each end station id, what is its name, latitude, and minimum duration for trips ended there? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
    "from": "spider"
  },
  {
    "question": "Question: List all the distinct stations from which a trip of duration below 100 started. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
    "from": "spider"
  },
  {
    "question": "Question: What are all the different start station names for a trip that lasted less than 100? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
    "from": "spider"
  },
  {
    "question": "Question: Find all the zip codes in which the max dew point have never reached 70. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
    "from": "spider"
  },
  {
    "question": "Question: What are all the different zip codes that have a maximum dew point that was always below 70? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
    "from": "spider"
  },
  {
    "question": "Question: Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
    "from": "spider"
  },
  {
    "question": "Question: What are the dates in which the mean sea level pressure was between 30.3 and 31? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
    "from": "spider"
  },
  {
    "question": "Question: What are the dates that have an average sea level pressure between 30.3 and 31? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
    "from": "spider"
  },
  {
    "question": "Question: Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the days that had the smallest temperature range, and what was that range? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the id and name of the stations that have ever had more than 12 bikes available? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
    "from": "spider"
  },
  {
    "question": "Question: What are the different ids and names of the stations that have had more than 12 bikes available? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
    "from": "spider"
  },
  {
    "question": "Question: Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place. | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
    "from": "spider"
  },
  {
    "question": "Question: What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
    "from": "spider"
  },
  {
    "question": "Question: How many trips started from Mountain View city and ended at Palo Alto city? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
    "from": "spider"
  },
  {
    "question": "Question: How many trips stated from  a station in Mountain View and ended at one in Palo Alto? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average latitude and longitude of the starting points of all trips? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
    "from": "spider"
  },
  {
    "question": "Question: What is the average latitude and longitude of all starting stations for the trips? | Tables: station, status, trip, weather | Columns: station.id, station.name, station.lat, station.long, station.dock_count, station.city, station.installation_date, status.station_id, status.bikes_available, status.docks_available, status.time, trip.id, trip.duration, trip.start_date, trip.start_station_name, trip.start_station_id, trip.end_date, trip.end_station_name, trip.end_station_id, trip.bike_id, trip.subscription_type, trip.zip_code, weather.date, weather.max_temperature_f, weather.mean_temperature_f, weather.min_temperature_f, weather.max_dew_point_f, weather.mean_dew_point_f, weather.min_dew_point_f, weather.max_humidity What is the SQL query?",
    "answer": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
    "from": "spider"
  },
  {
    "question": "Question: How many books are there? | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT count(*) FROM book",
    "from": "spider"
  },
  {
    "question": "Question: List the writers of the books in ascending alphabetical order. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Writer FROM book ORDER BY Writer ASC",
    "from": "spider"
  },
  {
    "question": "Question: List the titles of the books in ascending order of issues. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Title FROM book ORDER BY Issues ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of the books whose writer is not \"Elaine Lee\"? | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the title and issues of the books? | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Title ,  Issues FROM book",
    "from": "spider"
  },
  {
    "question": "Question: What are the dates of publications in descending order of price? | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct publishers of publications with price higher than 5000000? | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
    "from": "spider"
  },
  {
    "question": "Question: List the publisher of the publication with the highest price. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the publication dates of publications with 3 lowest prices. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: Show the title and publication dates of books. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
    "from": "spider"
  },
  {
    "question": "Question: Show writers who have published a book with price more than 4000000. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000",
    "from": "spider"
  },
  {
    "question": "Question: Show the titles of books in descending order of publication price. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
    "from": "spider"
  },
  {
    "question": "Question: Show publishers that have more than one publication. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Show different publishers together with the number of publications they have. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
    "from": "spider"
  },
  {
    "question": "Question: Please show the most common publication date. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the writers who have written more than one book. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: List the titles of books that are not published. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
    "from": "spider"
  },
  {
    "question": "Question: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000",
    "from": "spider"
  },
  {
    "question": "Question: What is the number of distinct publication dates? | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct publication dates are there in our record? | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
    "from": "spider"
  },
  {
    "question": "Question: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" | Tables: publication, book | Columns: publication.Publication_ID, publication.Book_ID, publication.Publisher, publication.Publication_Date, publication.Price, book.Book_ID, book.Title, book.Issues, book.Writer What is the SQL query?",
    "answer": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
    "from": "spider"
  },
  {
    "question": "Question: How many actors are there? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT count(*) FROM actor",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of actors. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT count(*) FROM actor",
    "from": "spider"
  },
  {
    "question": "Question: List the name of actors in ascending alphabetical order. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Name FROM actor ORDER BY Name ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of actors, ordered alphabetically? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Name FROM actor ORDER BY Name ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the characters and duration of actors? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Character ,  Duration FROM actor",
    "from": "spider"
  },
  {
    "question": "Question: Return the characters and durations for each actor. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Character ,  Duration FROM actor",
    "from": "spider"
  },
  {
    "question": "Question: List the name of actors whose age is not 20. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Name FROM actor WHERE Age != 20",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of actors who are not 20 years old? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Name FROM actor WHERE Age != 20",
    "from": "spider"
  },
  {
    "question": "Question: What are the characters of actors in descending order of age? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Character FROM actor ORDER BY age DESC",
    "from": "spider"
  },
  {
    "question": "Question: Return the characters for actors, ordered by age descending. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Character FROM actor ORDER BY age DESC",
    "from": "spider"
  },
  {
    "question": "Question: What is the duration of the oldest actor? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the duration of the actor with the greatest age. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of musicals with nominee \"Bob Fosse\"? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the names of musicals who have the nominee Bob Fosse. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct nominees of the musicals with the award that is not \"Tony Award\"? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the different nominees of musicals that have an award that is not the Tony Award. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
    "from": "spider"
  },
  {
    "question": "Question: Show names of actors and names of musicals they are in. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of actors and the musicals that they are in? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
    "from": "spider"
  },
  {
    "question": "Question: Show names of actors that have appeared in musical with name \"The Phantom of the Opera\". | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of actors who have been in the musical titled The Phantom of the Opera? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
    "from": "spider"
  },
  {
    "question": "Question: Show names of actors in descending order of the year their musical is awarded. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of actors ordered descending by the year in which their musical was awarded? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
    "from": "spider"
  },
  {
    "question": "Question: Show names of musicals and the number of actors who have appeared in the musicals. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
    "from": "spider"
  },
  {
    "question": "Question: How many actors have appeared in each musical? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
    "from": "spider"
  },
  {
    "question": "Question: Show names of musicals which have at least three actors. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of musicals who have at 3 or more actors? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
    "from": "spider"
  },
  {
    "question": "Question: Show different nominees and the number of musicals they have been nominated. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
    "from": "spider"
  },
  {
    "question": "Question: How many musicals has each nominee been nominated for? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
    "from": "spider"
  },
  {
    "question": "Question: Please show the nominee who has been nominated the greatest number of times. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Who is the nominee who has been nominated for the most musicals? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the most common result of the musicals. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the most frequent result across all musicals. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the nominees that have been nominated more than two musicals. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
    "from": "spider"
  },
  {
    "question": "Question: Who are the nominees who have been nominated more than two times? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
    "from": "spider"
  },
  {
    "question": "Question: List the name of musicals that do not have actors. | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of musicals who have no actors? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
    "from": "spider"
  },
  {
    "question": "Question: Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\". | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
    "from": "spider"
  },
  {
    "question": "Question: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\". | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
    "from": "spider"
  },
  {
    "question": "Question: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? | Tables: musical, actor | Columns: musical.Musical_ID, musical.Name, musical.Year, musical.Award, musical.Category, musical.Nominee, musical.Result, actor.Actor_ID, actor.Name, actor.Musical_ID, actor.Character, actor.Duration, actor.age What is the SQL query?",
    "answer": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the emails of the user named \"Mary\". | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT email FROM user_profiles WHERE name  =  'Mary'",
    "from": "spider"
  },
  {
    "question": "Question: What is the partition id of the user named \"Iron Man\". | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'",
    "from": "spider"
  },
  {
    "question": "Question: How many users are there? | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT count(*) FROM user_profiles",
    "from": "spider"
  },
  {
    "question": "Question: How many followers does each user have? | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT count(*) FROM follows",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of followers for each user. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT count(*) FROM follows GROUP BY f1",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of tweets in record. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT count(*) FROM tweets",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of users who posted some tweets. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT count(DISTINCT UID) FROM tweets",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and email of the user whose name contains the word ‘Swift’. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of users whose emails contain ‘superstar’ or ‘edu’. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
    "from": "spider"
  },
  {
    "question": "Question: Return the text of tweets about the topic 'intern'. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and email of the users who have more than 1000 followers. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\". | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and email for the users who have more than one follower. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of users who have more than one tweet. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Find the id of users who are followed by Mary and Susan. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the id of users who are followed by Mary or Susan. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the user who has the largest number of followers. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and email of the user followed by the least number of people. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the name and number of followers for each user, and sort the results by the number of followers in descending order. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
    "from": "spider"
  },
  {
    "question": "Question: List the names of 5 users followed by the largest number of other users. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
    "from": "spider"
  },
  {
    "question": "Question: List the text of all tweets in the order of date. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT text FROM tweets ORDER BY createdate",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of each user and number of tweets tweeted by each of them. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and partition id for users who tweeted less than twice. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the user who tweeted more than once, and number of tweets tweeted by them. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: Find the average number of followers for the users who do not have any tweet. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
    "from": "spider"
  },
  {
    "question": "Question: Find the average number of followers for the users who had some tweets. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
    "from": "spider"
  },
  {
    "question": "Question: Find the maximum and total number of followers of all users. | Tables: follows, tweets, user_profiles | Columns: follows.f1, follows.f2, tweets.id, tweets.uid, tweets.text, tweets.createdate, user_profiles.uid, user_profiles.name, user_profiles.email, user_profiles.partitionid, user_profiles.followers What is the SQL query?",
    "answer": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all the catalog entries. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
    "from": "spider"
  },
  {
    "question": "Question: What are all the catalog entry names? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
    "from": "spider"
  },
  {
    "question": "Question: Find the list of attribute data types possessed by more than 3 attribute definitions. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
    "from": "spider"
  },
  {
    "question": "Question: What are the attribute data types with more than 3 attribute definitions? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
    "from": "spider"
  },
  {
    "question": "Question: What is the attribute data type of the attribute with name \"Green\"? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the attribute data type for the attribute named \"Green\". | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and level of catalog structure with level between 5 and 10. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "from": "spider"
  },
  {
    "question": "Question: What are the name and level of catalog structure with level number between 5 and 10 | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "from": "spider"
  },
  {
    "question": "Question: Find all the catalog publishers whose name contains \"Murray\" | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
    "from": "spider"
  },
  {
    "question": "Question: Which catalog publishers have substring \"Murray\" in their names? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
    "from": "spider"
  },
  {
    "question": "Question: Which catalog publisher has published the most catalogs? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the catalog publisher that has the most catalogs. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the names and publication dates of all catalogs that have catalog level number greater than 5. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
    "from": "spider"
  },
  {
    "question": "Question: What are the name and publication date of the catalogs with catalog level number above 5? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
    "from": "spider"
  },
  {
    "question": "Question: What are the entry names of catalog with the attribute possessed by most entries. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
    "from": "spider"
  },
  {
    "question": "Question: Find the entry names of the catalog with the attribute that have the most entries. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
    "from": "spider"
  },
  {
    "question": "Question: What is the entry name of the most expensive catalog (in USD)? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the entry name of the catalog with the highest price (in USD). | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the level name of the cheapest catalog (in USD)? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the level name of the catalog with the lowest price (in USD). | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the average and minimum price (in Euro) of all products? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
    "from": "spider"
  },
  {
    "question": "Question: Give me the average and minimum price (in Euro) of the products. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
    "from": "spider"
  },
  {
    "question": "Question: What is the product with the highest height? Give me the catalog entry name. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which catalog content has the highest height? Give me the catalog entry name. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the product that has the smallest capacity. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which catalog content has the smallest capacity? Return the catalog entry name. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all the products whose stock number starts with \"2\". | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
    "from": "spider"
  },
  {
    "question": "Question: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of catalog entries with level number 8. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of catalog entries with level number 8? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of the products with length smaller than 3 or height greater than 5. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
    "from": "spider"
  },
  {
    "question": "Question: Which catalog contents have length below 3 or above 5? Find the catalog entry names. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and attribute ID of the attribute definitions with attribute value 0. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
    "from": "spider"
  },
  {
    "question": "Question: Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
    "from": "spider"
  },
  {
    "question": "Question: Find the name and capacity of products with price greater than 700 (in USD). | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
    "from": "spider"
  },
  {
    "question": "Question: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
    "from": "spider"
  },
  {
    "question": "Question: Find the dates on which more than one revisions were made. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: On which days more than one revisions were made on catalogs. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
    "from": "spider"
  },
  {
    "question": "Question: How many products are there in the records? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT count(*) FROM catalog_contents",
    "from": "spider"
  },
  {
    "question": "Question: Find the total number of catalog contents. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT count(*) FROM catalog_contents",
    "from": "spider"
  },
  {
    "question": "Question: Name all the products with next entry ID greater than 8. | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
    "from": "spider"
  },
  {
    "question": "Question: What are the catalog entry names of the products with next entry ID above 8? | Tables: Attribute_Definitions, Catalogs, Catalog_Structure, Catalog_Contents, Catalog_Contents_Additional_Attributes | Columns: Attribute_Definitions.attribute_id, Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_data_type, Catalogs.catalog_id, Catalogs.catalog_name, Catalogs.catalog_publisher, Catalogs.date_of_publication, Catalogs.date_of_latest_revision, Catalog_Structure.catalog_level_number, Catalog_Structure.catalog_id, Catalog_Structure.catalog_level_name, Catalog_Contents.catalog_entry_id, Catalog_Contents.catalog_level_number, Catalog_Contents.parent_entry_id, Catalog_Contents.previous_entry_id, Catalog_Contents.next_entry_id, Catalog_Contents.catalog_entry_name, Catalog_Contents.product_stock_number, Catalog_Contents.price_in_dollars, Catalog_Contents.price_in_euros, Catalog_Contents.price_in_pounds, Catalog_Contents.capacity, Catalog_Contents.length, Catalog_Contents.height, Catalog_Contents.width, Catalog_Contents_Additional_Attributes.catalog_entry_id, Catalog_Contents_Additional_Attributes.catalog_level_number, Catalog_Contents_Additional_Attributes.attribute_id, Catalog_Contents_Additional_Attributes.attribute_value What is the SQL query?",
    "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
    "from": "spider"
  },
  {
    "question": "Question: How many aircrafts do we have? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Aircraft",
    "from": "spider"
  },
  {
    "question": "Question: How many aircrafts exist in the database? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Aircraft",
    "from": "spider"
  },
  {
    "question": "Question: Show name and distance for all aircrafts. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name ,  distance FROM Aircraft",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and distances for all airplanes? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name ,  distance FROM Aircraft",
    "from": "spider"
  },
  {
    "question": "Question: Show ids for all aircrafts with more than 1000 distance. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT aid FROM Aircraft WHERE distance  >  1000",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of all aircrafts that can cover a distance of more than 1000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT aid FROM Aircraft WHERE distance  >  1000",
    "from": "spider"
  },
  {
    "question": "Question: How many aircrafts have distance between 1000 and 5000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
    "from": "spider"
  },
  {
    "question": "Question: What is the count of aircrafts that have a distance between 1000 and 5000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
    "from": "spider"
  },
  {
    "question": "Question: What is the name and distance for aircraft with id 12? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
    "from": "spider"
  },
  {
    "question": "Question: What is the name and distance for the aircraft that has an id of 12? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
    "from": "spider"
  },
  {
    "question": "Question: What is the minimum, average, and maximum distance of all aircrafts. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
    "from": "spider"
  },
  {
    "question": "Question: Return the minimum, average and maximum distances traveled across all aircrafts. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
    "from": "spider"
  },
  {
    "question": "Question: Show the id and name of the aircraft with the maximum distance. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the id and name of the aircraft that can cover the maximum distance? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the name of aircrafts with top three lowest distances. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What are the aircrafts with top 3 shortest lengthes? List their names. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: Show names for all aircrafts with distances more than the average. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all aircrafts that can cover more distances than average? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
    "from": "spider"
  },
  {
    "question": "Question: How many employees do we have? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Employee",
    "from": "spider"
  },
  {
    "question": "Question: What is the number of employees? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Employee",
    "from": "spider"
  },
  {
    "question": "Question: Show name and salary for all employees sorted by salary. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name ,  salary FROM Employee ORDER BY salary",
    "from": "spider"
  },
  {
    "question": "Question: What is the name and salary of all employees in order of salary? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name ,  salary FROM Employee ORDER BY salary",
    "from": "spider"
  },
  {
    "question": "Question: Show ids for all employees with at least 100000 salary. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT eid FROM Employee WHERE salary  >  100000",
    "from": "spider"
  },
  {
    "question": "Question: What is the id of every employee who has at least a salary of  100000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT eid FROM Employee WHERE salary  >  100000",
    "from": "spider"
  },
  {
    "question": "Question: How many employees have salary between 100000 and 200000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
    "from": "spider"
  },
  {
    "question": "Question: What is the number of employees that have a salary between 100000 and 200000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
    "from": "spider"
  },
  {
    "question": "Question: What is the name and salary for employee with id 242518965? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
    "from": "spider"
  },
  {
    "question": "Question: What is the name and salary of the employee with the id 242518965? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
    "from": "spider"
  },
  {
    "question": "Question: What is average and maximum salary of all employees. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT avg(salary) ,  max(salary) FROM Employee",
    "from": "spider"
  },
  {
    "question": "Question: What is the average and largest salary of all employees? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT avg(salary) ,  max(salary) FROM Employee",
    "from": "spider"
  },
  {
    "question": "Question: Show the id and name of the employee with maximum salary. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the id and name of the employee with the highest salary? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the name of employees with three lowest salaries. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the 3 employees who get paid the least? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: Show names for all employees with salary more than the average. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all employees who have a salary higher than average? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
    "from": "spider"
  },
  {
    "question": "Question: Show the id and salary of Mark Young. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
    "from": "spider"
  },
  {
    "question": "Question: What is the id and salary of the employee named Mark Young? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
    "from": "spider"
  },
  {
    "question": "Question: How many flights do we have? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Flight",
    "from": "spider"
  },
  {
    "question": "Question: What is the number of flights? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(*) FROM Flight",
    "from": "spider"
  },
  {
    "question": "Question: Show flight number, origin, destination of all flights in the alphabetical order of the departure cities. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
    "from": "spider"
  },
  {
    "question": "Question: What is the flight number, origin, and destination for all flights in alphabetical order by departure cities? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
    "from": "spider"
  },
  {
    "question": "Question: Show all flight number from Los Angeles. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the numbers of all flights coming from Los Angeles? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
    "from": "spider"
  },
  {
    "question": "Question: Show origins of all flights with destination Honolulu. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the origins of all flights that are headed to Honolulu? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
    "from": "spider"
  },
  {
    "question": "Question: Show me the departure date and arrival date for all flights from Los Angeles to Honolulu. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the departure and arrival dates of all flights from LA to Honolulu? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
    "from": "spider"
  },
  {
    "question": "Question: Show flight number for all flights with more than 2000 distance. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno FROM Flight WHERE distance  >  2000",
    "from": "spider"
  },
  {
    "question": "Question: What are the numbers of all flights that can cover a distance of more than 2000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno FROM Flight WHERE distance  >  2000",
    "from": "spider"
  },
  {
    "question": "Question: What is the average price for flights from Los Angeles to Honolulu. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average price for flights from LA to Honolulu? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
    "from": "spider"
  },
  {
    "question": "Question: Show origin and destination for flights with price higher than 300. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
    "from": "spider"
  },
  {
    "question": "Question: What is the origin and destination for all flights whose price is higher than 300? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
    "from": "spider"
  },
  {
    "question": "Question: Show the flight number and distance of the flight with maximum price. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the flight number and its distance for the one with the maximum price? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the flight number of flights with three lowest distances. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What are the numbers of the shortest flights? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
    "from": "spider"
  },
  {
    "question": "Question: What is the average distance and average price for flights from Los Angeles. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average distance and price for all flights from LA? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
    "from": "spider"
  },
  {
    "question": "Question: Show all origins and the number of flights from each origin. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
    "from": "spider"
  },
  {
    "question": "Question: For each origin, how many flights came from there? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
    "from": "spider"
  },
  {
    "question": "Question: Show all destinations and the number of flights to each destination. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
    "from": "spider"
  },
  {
    "question": "Question: What are the destinations and number of flights to each one? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
    "from": "spider"
  },
  {
    "question": "Question: Which origin has most number of flights? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What place has the most flights coming from there? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which destination has least number of flights? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What destination has the fewest number of flights? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the aircraft name for the flight with number 99 | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the aircraft that was on flight number 99? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
    "from": "spider"
  },
  {
    "question": "Question: Show all flight numbers with aircraft Airbus A340-300. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the flight numbers for the aircraft Airbus A340-300? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
    "from": "spider"
  },
  {
    "question": "Question: Show aircraft names and number of flights for each aircraft. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of each aircraft and how many flights does each one complete? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
    "from": "spider"
  },
  {
    "question": "Question: Show names for all aircraft with at least two flights. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
    "from": "spider"
  },
  {
    "question": "Question: What are the names for all aircrafts with at least 2 flights? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
    "from": "spider"
  },
  {
    "question": "Question: How many employees have certificate. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(DISTINCT eid) FROM Certificate",
    "from": "spider"
  },
  {
    "question": "Question: What is the count of distinct employees with certificates? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT count(DISTINCT eid) FROM Certificate",
    "from": "spider"
  },
  {
    "question": "Question: Show ids for all employees who don't have a certificate. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids of all employees that don't have certificates? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
    "from": "spider"
  },
  {
    "question": "Question: Show names for all aircrafts of which John Williams has certificates. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all aircrafts that John Williams have certificates to be able to fly? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
    "from": "spider"
  },
  {
    "question": "Question: Show names for all employees who have certificate of Boeing 737-800. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all employees who have a certificate to fly Boeing 737-800? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
    "from": "spider"
  },
  {
    "question": "Question: Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"",
    "from": "spider"
  },
  {
    "question": "Question: Show names for all employees who do not have certificate of Boeing 737-800. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all employees who are not certified to fly Boeing 737-800s? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the name of aircraft which fewest people have its certificate. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the aircraft that the least people are certified to fly? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate. | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
    "from": "spider"
  },
  {
    "question": "Question: What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
    "from": "spider"
  },
  {
    "question": "Question: what is the salary and name of the employee who has the most number of aircraft certificates? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the salaray and name of the employee that is certified to fly the most planes? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the salaray and name of the employee with the most certificates to fly planes more than 5000? | Tables: flight, aircraft, employee, certificate | Columns: flight.flno, flight.origin, flight.destination, flight.distance, flight.departure_date, flight.arrival_date, flight.price, flight.aid, aircraft.aid, aircraft.name, aircraft.distance, employee.eid, employee.name, employee.salary, certificate.eid, certificate.aid What is the SQL query?",
    "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many allergies are there? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(DISTINCT allergy) FROM Allergy_type",
    "from": "spider"
  },
  {
    "question": "Question: How many allergy entries are there? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(DISTINCT allergy) FROM Allergy_type",
    "from": "spider"
  },
  {
    "question": "Question: How many different allergy types exist? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct allergies are there? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
    "from": "spider"
  },
  {
    "question": "Question: Show all allergy types. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT allergytype FROM Allergy_type",
    "from": "spider"
  },
  {
    "question": "Question: What are the different allergy types? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT allergytype FROM Allergy_type",
    "from": "spider"
  },
  {
    "question": "Question: Show all allergies and their types. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergy ,  allergytype FROM Allergy_type",
    "from": "spider"
  },
  {
    "question": "Question: What are the allergies and their types? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergy ,  allergytype FROM Allergy_type",
    "from": "spider"
  },
  {
    "question": "Question: Show all allergies with type food. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
    "from": "spider"
  },
  {
    "question": "Question: What are all the different food allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the type of allergy Cat? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
    "from": "spider"
  },
  {
    "question": "Question: What is allergy type of a cat allergy? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
    "from": "spider"
  },
  {
    "question": "Question: How many allergies have type animal? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
    "from": "spider"
  },
  {
    "question": "Question: How many animal type allergies exist? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
    "from": "spider"
  },
  {
    "question": "Question: Show all allergy types and the number of allergies in each type. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
    "from": "spider"
  },
  {
    "question": "Question: What are the allergy types and how many allergies correspond to each one? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
    "from": "spider"
  },
  {
    "question": "Question: Which allergy type has most number of allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which allergy type is most common? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which allergy type has least number of allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which allergy type is the least common? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many students are there? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: What is the total number of students? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: Show first name and last name for all students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Fname ,  Lname FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: What are the full names of all students | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Fname ,  Lname FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: How many different advisors are listed? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(DISTINCT advisor) FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: How many advisors are there? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(DISTINCT advisor) FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: Show all majors. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT Major FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: What are the different majors? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT Major FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: Show all cities where students live. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT city_code FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: What cities do students live in? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT city_code FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: Show first name, last name, age for all female students. Their sex is F. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
    "from": "spider"
  },
  {
    "question": "Question: What are the full names and ages for all female students whose sex is F? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
    "from": "spider"
  },
  {
    "question": "Question: Show student ids for all male students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Student WHERE Sex  =  'M'",
    "from": "spider"
  },
  {
    "question": "Question: What are the student ids for all male students? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Student WHERE Sex  =  'M'",
    "from": "spider"
  },
  {
    "question": "Question: How many students are age 18? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student WHERE age  =  18",
    "from": "spider"
  },
  {
    "question": "Question: How many students are 18 years old? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student WHERE age  =  18",
    "from": "spider"
  },
  {
    "question": "Question: Show all student ids who are older than 20. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Student WHERE age  >  20",
    "from": "spider"
  },
  {
    "question": "Question: What are the student ids for students over 20 years old? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Student WHERE age  >  20",
    "from": "spider"
  },
  {
    "question": "Question: Which city does the student whose last name is \"Kim\" live in? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"",
    "from": "spider"
  },
  {
    "question": "Question: Give the city that the student whose family name is Kim lives in. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"",
    "from": "spider"
  },
  {
    "question": "Question: Who is the advisor of student with ID 1004? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Advisor FROM Student WHERE StuID  =  1004",
    "from": "spider"
  },
  {
    "question": "Question: Who advises student 1004? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Advisor FROM Student WHERE StuID  =  1004",
    "from": "spider"
  },
  {
    "question": "Question: How many students live in HKG or CHI? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
    "from": "spider"
  },
  {
    "question": "Question: Give the number of students living in either HKG or CHI. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the minimum, average, and maximum age of all students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: What is the minimum, mean, and maximum age across all students? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
    "from": "spider"
  },
  {
    "question": "Question: What is the last name of the youngest student? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
    "from": "spider"
  },
  {
    "question": "Question: Provide the last name of the youngest student. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
    "from": "spider"
  },
  {
    "question": "Question: Show the student id of the oldest student. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
    "from": "spider"
  },
  {
    "question": "Question: What student id corresponds to the oldest student? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
    "from": "spider"
  },
  {
    "question": "Question: Show all majors and corresponding number of students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT major ,  count(*) FROM Student GROUP BY major",
    "from": "spider"
  },
  {
    "question": "Question: How many students are there for each major? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT major ,  count(*) FROM Student GROUP BY major",
    "from": "spider"
  },
  {
    "question": "Question: Which major has most number of students? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the largest major? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show all ages and corresponding number of students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT age ,  count(*) FROM Student GROUP BY age",
    "from": "spider"
  },
  {
    "question": "Question: How old is each student and how many students are each age? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT age ,  count(*) FROM Student GROUP BY age",
    "from": "spider"
  },
  {
    "question": "Question: Show the average age for male and female students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
    "from": "spider"
  },
  {
    "question": "Question: What are the average ages for male and female students? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
    "from": "spider"
  },
  {
    "question": "Question: Show all cities and corresponding number of students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
    "from": "spider"
  },
  {
    "question": "Question: How many students live in each city? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
    "from": "spider"
  },
  {
    "question": "Question: Show all advisors and corresponding number of students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
    "from": "spider"
  },
  {
    "question": "Question: How many students does each advisor have? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
    "from": "spider"
  },
  {
    "question": "Question: Which advisor has most number of students? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Give the advisor with the most students. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many students have cat allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
    "from": "spider"
  },
  {
    "question": "Question: How many students are affected by cat allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
    "from": "spider"
  },
  {
    "question": "Question: Show all student IDs who have at least two allergies. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the students ids of students who have more than one allergy? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the student ids of students who don't have any allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
    "from": "spider"
  },
  {
    "question": "Question: Which students are unaffected by allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
    "from": "spider"
  },
  {
    "question": "Question: How many female students have milk or egg allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
    "from": "spider"
  },
  {
    "question": "Question: How many students who are female are allergic to milk or eggs? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
    "from": "spider"
  },
  {
    "question": "Question: How many students have a food allergy? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
    "from": "spider"
  },
  {
    "question": "Question: How many students are affected by food related allergies? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
    "from": "spider"
  },
  {
    "question": "Question: Which allergy has most number of students affected? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which allergy is the most common? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show all allergies with number of students affected. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
    "from": "spider"
  },
  {
    "question": "Question: How many students have each different allergy? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
    "from": "spider"
  },
  {
    "question": "Question: Show all allergy type with number of students affected. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
    "from": "spider"
  },
  {
    "question": "Question: How many students are affected by each allergy type? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
    "from": "spider"
  },
  {
    "question": "Question: Find the last name and age of the student who has allergy to both milk and cat. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
    "from": "spider"
  },
  {
    "question": "Question: What are the last names and ages of the students who are allergic to milk and cat? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
    "from": "spider"
  },
  {
    "question": "Question: What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
    "from": "spider"
  },
  {
    "question": "Question: What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
    "from": "spider"
  },
  {
    "question": "Question: Find the first name and gender of the student who has allergy to milk but not cat. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
    "from": "spider"
  },
  {
    "question": "Question: What are the first name and gender of the students who have allergy to milk but can put up with cats? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
    "from": "spider"
  },
  {
    "question": "Question: Find the average age of the students who have allergies with food and animal types. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
    "from": "spider"
  },
  {
    "question": "Question: How old are the students with allergies to food and animal types on average? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
    "from": "spider"
  },
  {
    "question": "Question: List the first and last name of the students who do not have any food type allergy. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
    "from": "spider"
  },
  {
    "question": "Question: What is the full name of each student who is not allergic to any type of food. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of male (sex is 'M') students who have some food type allery. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
    "from": "spider"
  },
  {
    "question": "Question: How many male students (sex is 'M') are allergic to any type of food? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
    "from": "spider"
  },
  {
    "question": "Question: Find the different first names and cities of the students who have allergy to milk or cat. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct first names and cities of the students who have allergy either to milk or to cat? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of students who are older than 18 and do not have allergy to either food or animal. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
    "from": "spider"
  },
  {
    "question": "Question: How many students are over 18 and do not have allergy to food type or animal type? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
    "from": "spider"
  },
  {
    "question": "Question: Find the first name and major of the students who are not allegry to soy. | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
    "from": "spider"
  },
  {
    "question": "Question: What are the first name and major of the students who are able to consume soy? | Tables: Allergy_Type, Has_Allergy, Student | Columns: Allergy_Type.Allergy, Allergy_Type.AllergyType, Has_Allergy.StuID, Has_Allergy.Allergy, Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code What is the SQL query?",
    "answer": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
    "from": "spider"
  },
  {
    "question": "Question: A list of the top 5 countries by number of invoices. List country name and number of invoices. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
    "from": "spider"
  },
  {
    "question": "Question: What are the top 5 countries by number of invoices and how many do they have? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
    "from": "spider"
  },
  {
    "question": "Question: A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the top 8 countries by total invoice size and what are those sizes? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
    "from": "spider"
  },
  {
    "question": "Question: A list of the top 10 countries by average invoice size. List country name and average invoice size. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the countries and average invoice size of the top countries by size? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: Find out 5 customers who most recently purchased something. List customers' first and last name. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
    "from": "spider"
  },
  {
    "question": "Question: What are the first and last names of the 5 customers who purchased something most recently? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
    "from": "spider"
  },
  {
    "question": "Question: Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: What are the top 10 customers' first and last names by total number of orders and how many orders did they make? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: List the top 10 customers by total gross sales. List customers' first and last name and total gross sales. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: List the top 5 genres by number of tracks. List genres name and total tracks. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
    "from": "spider"
  },
  {
    "question": "Question: How many tracks does each genre have and what are the names of the top 5? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
    "from": "spider"
  },
  {
    "question": "Question: List every album's title. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT title FROM albums;",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of all the albums? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT title FROM albums;",
    "from": "spider"
  },
  {
    "question": "Question: List every album ordered by album title in ascending order. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT title FROM albums ORDER BY title;",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of all the albums alphabetically ascending? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT title FROM albums ORDER BY title;",
    "from": "spider"
  },
  {
    "question": "Question: List every album whose title starts with A in alphabetical order. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of all albums that start with A in alphabetical order? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
    "from": "spider"
  },
  {
    "question": "Question: List the customers first and last name of 10 least expensive invoices. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: What are the first and last names of the customers with the 10 cheapest invoices? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: List total amount of  invoice from Chicago, IL. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
    "from": "spider"
  },
  {
    "question": "Question: What are the total amount of money in the invoices billed from Chicago, Illinois? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
    "from": "spider"
  },
  {
    "question": "Question: List the number of invoices from Chicago, IL. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
    "from": "spider"
  },
  {
    "question": "Question: How many invoices were billed from Chicago, IL? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
    "from": "spider"
  },
  {
    "question": "Question: List the number of invoices from the US, grouped by state. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
    "from": "spider"
  },
  {
    "question": "Question: How many invoices were billed from each state? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
    "from": "spider"
  },
  {
    "question": "Question: List the state in the US with the most invoices. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: What are the states with the most invoices? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: List the number of invoices and the invoice total from California. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the number of invoices and total money billed in them from CA? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
    "from": "spider"
  },
  {
    "question": "Question: List Aerosmith's albums. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of all the Aerosmith albums? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
    "from": "spider"
  },
  {
    "question": "Question: How many albums does Billy Cobham has? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
    "from": "spider"
  },
  {
    "question": "Question: How many albums has Billy Cobam released? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
    "from": "spider"
  },
  {
    "question": "Question: Eduardo Martins is a customer at which company? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the company where Eduardo Martins is a customer? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
    "from": "spider"
  },
  {
    "question": "Question: What is Astrid Gruber's email and phone number? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the email and phone number of Astrid Gruber the customer? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
    "from": "spider"
  },
  {
    "question": "Question: How many customers live in Prague city? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
    "from": "spider"
  },
  {
    "question": "Question: How many customers live in the city of Prague? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
    "from": "spider"
  },
  {
    "question": "Question: How many customers in state of CA? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM customers WHERE state = \"CA\";",
    "from": "spider"
  },
  {
    "question": "Question: How many customers are from California? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM customers WHERE state = \"CA\";",
    "from": "spider"
  },
  {
    "question": "Question: What country does Roberto Almeida live? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
    "from": "spider"
  },
  {
    "question": "Question: In which country does Roberto Almeida? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
    "from": "spider"
  },
  {
    "question": "Question: List the name of albums that are released by aritist whose name has 'Led' | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
    "from": "spider"
  },
  {
    "question": "Question: What is the title of the album that was released by the artist whose name has the phrase 'Led'? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
    "from": "spider"
  },
  {
    "question": "Question: How many customers does Steve Johnson support? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the count of customers that Steve Johnson supports? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the title, phone and hire date of Nancy Edwards? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the title, phone number and hire date for the employee named Nancy Edwards? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
    "from": "spider"
  },
  {
    "question": "Question: find the full name of employees who report to Nancy Edwards? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the first and last name of the employee who reports to Nancy Edwards? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the address of employee Nancy Edwards? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
    "from": "spider"
  },
  {
    "question": "Question: What is Nancy Edwards's address? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
    "from": "spider"
  },
  {
    "question": "Question: Find the full name of employee who supported the most number of customers. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the full name of the employee who has the most customers? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many employees are living in Canada? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM employees WHERE country = \"Canada\";",
    "from": "spider"
  },
  {
    "question": "Question: How many employees live in Canada? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM employees WHERE country = \"Canada\";",
    "from": "spider"
  },
  {
    "question": "Question: What is employee Nancy Edwards's phone number? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the the phone number of Nancy Edwards? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
    "from": "spider"
  },
  {
    "question": "Question: Who is the youngest employee in the company? List employee's first and last name. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: What si the youngest employee's first and last name? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: List top 10 employee work longest in the company. List employee's first and last name. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: What are the first and last names of the top 10 longest-serving employees? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of employees whose title is IT Staff from each city? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
    "from": "spider"
  },
  {
    "question": "Question: How many employees who are IT staff are from each city? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
    "from": "spider"
  },
  {
    "question": "Question: Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: What are the first and last names of all the employees and how many people report to them? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
    "from": "spider"
  },
  {
    "question": "Question: How many orders does Lucas Mancini has? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
    "from": "spider"
  },
  {
    "question": "Question: How many orders does Luca Mancini have in his invoices? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the total amount of money spent by Lucas Mancini? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
    "from": "spider"
  },
  {
    "question": "Question: How much money did Lucas Mancini spend? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
    "from": "spider"
  },
  {
    "question": "Question: List all media types. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT name FROM media_types;",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all the media types? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT name FROM media_types;",
    "from": "spider"
  },
  {
    "question": "Question: List all different genre types. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT DISTINCT name FROM genres;",
    "from": "spider"
  },
  {
    "question": "Question: What are the different names of the genres? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT DISTINCT name FROM genres;",
    "from": "spider"
  },
  {
    "question": "Question: List the name of all playlist. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT name FROM playlists;",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all the playlists? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT name FROM playlists;",
    "from": "spider"
  },
  {
    "question": "Question: Who is the composer of track Fast As a Shark? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the composer who created the track \"Fast As a Shark\"? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
    "from": "spider"
  },
  {
    "question": "Question: How long does track Fast As a Shark has? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";",
    "from": "spider"
  },
  {
    "question": "Question: How many milliseconds long is Fast As a Shark? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of tracks whose genre is Rock? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of all tracks in the Rock genre? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
    "from": "spider"
  },
  {
    "question": "Question: What is title of album which track Balls to the Wall belongs to? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the album that has the track Ball to the Wall? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
    "from": "spider"
  },
  {
    "question": "Question: List name of all tracks in Balls to the Wall. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of all tracks in the album named Balls to the Wall? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
    "from": "spider"
  },
  {
    "question": "Question: List title of albums have the number of tracks greater than 10. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the albums that have more than 10 tracks? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
    "from": "spider"
  },
  {
    "question": "Question: List the name of tracks belongs to genre Rock and whose media type is MPEG audio file. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all Rock tracks that are stored on MPEG audio files? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
    "from": "spider"
  },
  {
    "question": "Question: List the name of tracks belongs to genre Rock or media type is MPEG audio file. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all tracks that belong to the Rock genre and whose media type is MPEG? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
    "from": "spider"
  },
  {
    "question": "Question: List the name of tracks belongs to genre Rock or genre Jazz. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the tracks that are Rock or Jazz songs? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
    "from": "spider"
  },
  {
    "question": "Question: List the name of all tracks in the playlists of Movies. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all tracks that are on playlists titled Movies? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
    "from": "spider"
  },
  {
    "question": "Question: List the name of playlist which has number of tracks greater than 100. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all playlists that have more than 100 tracks? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
    "from": "spider"
  },
  {
    "question": "Question: List all tracks bought by customer Daan Peeters. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
    "from": "spider"
  },
  {
    "question": "Question: What are the tracks that Dean Peeters bought? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
    "from": "spider"
  },
  {
    "question": "Question: How much is the track Fast As a Shark? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
    "from": "spider"
  },
  {
    "question": "Question: What is the unit price of the tune \"Fast As a Shark\"? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of tracks which are in Movies playlist but not in music playlist. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all tracks that are on the Movies playlist but not in the music playlist? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of tracks which are in both Movies and music playlists. | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of all the tracks that are in both the Movies and music playlists? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
    "from": "spider"
  },
  {
    "question": "Question: Find number of tracks in each genre? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
    "from": "spider"
  },
  {
    "question": "Question: How many tracks are in each genre? | Tables: artists, sqlite_sequence, albums, employees, customers, genres, invoices, media_types, tracks, invoice_lines, playlists, playlist_tracks | Columns: artists.id, artists.name, sqlite_sequence.name, sqlite_sequence.seq, albums.id, albums.title, albums.artist_id, employees.id, employees.last_name, employees.first_name, employees.title, employees.reports_to, employees.birth_date, employees.hire_date, employees.address, employees.city, employees.state, employees.country, employees.postal_code, employees.phone, employees.fax, employees.email, customers.id, customers.first_name, customers.last_name, customers.company, customers.address, customers.city, customers.state, customers.country What is the SQL query?",
    "answer": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
    "from": "spider"
  },
  {
    "question": "Question: How many editors are there? | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT count(*) FROM editor",
    "from": "spider"
  },
  {
    "question": "Question: List the names of editors in ascending order of age. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT Name FROM editor ORDER BY Age ASC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and ages of editors? | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT Name ,  Age FROM editor",
    "from": "spider"
  },
  {
    "question": "Question: List the names of editors who are older than 25. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT Name FROM editor WHERE Age  >  25",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of editors of age either 24 or 25. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the youngest editor? | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the different ages of editors? Show each age along with the number of editors of that age. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age",
    "from": "spider"
  },
  {
    "question": "Question: Please show the most common age of editors. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the distinct themes of journals. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT DISTINCT Theme FROM journal",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of editors and the theme of journals for which they serve on committees. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
    "from": "spider"
  },
  {
    "question": "Question: For each journal_committee, find the editor name and the journal theme. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
    "from": "spider"
  },
  {
    "question": "Question: Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of editors that are on the committee of journals with sales bigger than 3000. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000",
    "from": "spider"
  },
  {
    "question": "Question: Show the id, name of each editor and the number of journal committees they are on. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
    "from": "spider"
  },
  {
    "question": "Question: Show the names of editors that are on at least two journal committees. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: List the names of editors that are not on any journal committee. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
    "from": "spider"
  },
  {
    "question": "Question: List the date, theme and sales of the journal which did not have any of the listed editors serving on committee. | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID",
    "from": "spider"
  },
  {
    "question": "Question: What is the average sales of the journals that have an editor whose work type is 'Photo'? | Tables: journal, editor, journal_committee | Columns: journal.Journal_ID, journal.Date, journal.Theme, journal.Sales, editor.Editor_ID, editor.Name, editor.Age, journal_committee.Editor_ID, journal_committee.Journal_ID, journal_committee.Work_Type What is the SQL query?",
    "answer": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'",
    "from": "spider"
  },
  {
    "question": "Question: How many accounts do we have? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Accounts",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of accounts. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Accounts",
    "from": "spider"
  },
  {
    "question": "Question: Show ids, customer ids, names for all accounts. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
    "from": "spider"
  },
  {
    "question": "Question: What are the account ids, customer ids, and account names for all the accounts? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
    "from": "spider"
  },
  {
    "question": "Question: Show other account details for account with name 338. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the other account details for the account with the name 338? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the first name, last name, and phone of the customer with account name 162? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
    "from": "spider"
  },
  {
    "question": "Question: Give the full name and phone of the customer who has the account name 162. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
    "from": "spider"
  },
  {
    "question": "Question: How many accounts does the customer with first name Art and last name Turcotte have? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the number of accounts that the customer with the first name Art and last name Turcotte has. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
    "from": "spider"
  },
  {
    "question": "Question: Show all customer ids and the number of accounts for each customer. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
    "from": "spider"
  },
  {
    "question": "Question: How many accounts are there for each customer id? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
    "from": "spider"
  },
  {
    "question": "Question: Show the customer id and number of accounts with most accounts. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the customer id of the customer with the most accounts, and how many accounts does this person have? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the customer first, last name and id with least number of accounts. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Give the full name and customer id of the customer with the fewest accounts. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the number of all customers without an account. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
    "from": "spider"
  },
  {
    "question": "Question: How many customers do not have an account? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
    "from": "spider"
  },
  {
    "question": "Question: Show the first names and last names of customers without any account. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the full names of customers who do not have any accounts? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
    "from": "spider"
  },
  {
    "question": "Question: Show distinct first and last names for all customers with an account. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the full names of customers who have accounts? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
    "from": "spider"
  },
  {
    "question": "Question: How many customers have an account? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(DISTINCT customer_id) FROM Accounts",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of customers who hold an account. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(DISTINCT customer_id) FROM Accounts",
    "from": "spider"
  },
  {
    "question": "Question: How many customers do we have? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of customers. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers",
    "from": "spider"
  },
  {
    "question": "Question: Show ids, first names, last names, and phones for all customers. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids, full names, and phones of each customer? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
    "from": "spider"
  },
  {
    "question": "Question: What is the phone and email for customer with first name Aniyah and last name Feest? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the phone and email of the customer with the first name Aniyah and last name Feest. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
    "from": "spider"
  },
  {
    "question": "Question: Show the number of customer cards. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers_cards",
    "from": "spider"
  },
  {
    "question": "Question: How many customer cards are there? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers_cards",
    "from": "spider"
  },
  {
    "question": "Question: Show ids, customer ids, card type codes, card numbers for all cards. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
    "from": "spider"
  },
  {
    "question": "Question: What are card ids, customer ids, card types, and card numbers for each customer card? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
    "from": "spider"
  },
  {
    "question": "Question: Show the date valid from and the date valid to for the card with card number '4560596484842'. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the valid from and valid to dates for the card with the number 4560596484842? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the first name, last name, and phone of the customer with card 4560596484842. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
    "from": "spider"
  },
  {
    "question": "Question: Return the full name and phone of the customer who has card number 4560596484842. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
    "from": "spider"
  },
  {
    "question": "Question: How many cards does customer Art Turcotte have? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of cards the customer with the first name Art and last name Turcotte has. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
    "from": "spider"
  },
  {
    "question": "Question: How many debit cards do we have? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of customer cards of the type Debit. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
    "from": "spider"
  },
  {
    "question": "Question: How many credit cards does customer Blanche Huels have? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of credit cards that the customer with first name Blanche and last name Huels has. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
    "from": "spider"
  },
  {
    "question": "Question: Show all customer ids and the number of cards owned by each customer. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the different customer ids, and how many cards does each one hold? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
    "from": "spider"
  },
  {
    "question": "Question: What is the customer id with most number of cards, and how many does he have? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the id of the customer who has the most cards, as well as the number of cards. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show id, first and last names for all customers with at least two cards. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids and full names of customers who hold two or more cards? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What is the customer id, first and last name with least number of accounts. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the id and full name of the customer who has the fewest accounts. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show all card type codes and the number of cards in each type. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
    "from": "spider"
  },
  {
    "question": "Question: What are the different card types, and how many cards are there of each? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
    "from": "spider"
  },
  {
    "question": "Question: What is the card type code with most number of cards? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the code of the card type that is most common. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show card type codes with at least 5 cards. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
    "from": "spider"
  },
  {
    "question": "Question: What are the codes of card types that have 5 or more cards? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
    "from": "spider"
  },
  {
    "question": "Question: Show all card type codes and the number of customers holding cards in each type. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
    "from": "spider"
  },
  {
    "question": "Question: What are the different card type codes, and how many different customers hold each type? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
    "from": "spider"
  },
  {
    "question": "Question: Show the customer ids and firstname without a credit card. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids and first names of customers who do not hold a credit card? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
    "from": "spider"
  },
  {
    "question": "Question: Show all card type codes. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT DISTINCT card_type_code FROM Customers_Cards",
    "from": "spider"
  },
  {
    "question": "Question: What are the different card type codes? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT DISTINCT card_type_code FROM Customers_Cards",
    "from": "spider"
  },
  {
    "question": "Question: Show the number of card types. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
    "from": "spider"
  },
  {
    "question": "Question: How many different card types are there? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
    "from": "spider"
  },
  {
    "question": "Question: Show all transaction types. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
    "from": "spider"
  },
  {
    "question": "Question: What are the different types of transactions? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
    "from": "spider"
  },
  {
    "question": "Question: Show the number of transaction types. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
    "from": "spider"
  },
  {
    "question": "Question: How many different types of transactions are there? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
    "from": "spider"
  },
  {
    "question": "Question: What is the average and total transaction amount? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
    "from": "spider"
  },
  {
    "question": "Question: Return the average transaction amount, as well as the total amount of all transactions. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
    "from": "spider"
  },
  {
    "question": "Question: Show the card type codes and the number of transactions. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
    "from": "spider"
  },
  {
    "question": "Question: What are the different card types, and how many transactions have been made with each? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
    "from": "spider"
  },
  {
    "question": "Question: Show the transaction type and the number of transactions. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
    "from": "spider"
  },
  {
    "question": "Question: What are the different transaction types, and how many transactions of each have taken place? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
    "from": "spider"
  },
  {
    "question": "Question: What is the transaction type that has processed the greatest total amount in transactions? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the type of transaction with the highest total amount. | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the account id and the number of transactions for each account | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the different account ids that have made financial transactions, as well as how many transactions correspond to each? | Tables: Accounts, Customers, Customers_Cards, Financial_Transactions | Columns: Accounts.account_id, Accounts.customer_id, Accounts.account_name, Accounts.other_account_details, Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email, Customers.other_customer_details, Customers_Cards.card_id, Customers_Cards.customer_id, Customers_Cards.card_type_code, Customers_Cards.card_number, Customers_Cards.date_valid_from, Customers_Cards.date_valid_to, Customers_Cards.other_card_details, Financial_Transactions.transaction_id, Financial_Transactions.previous_transaction_id, Financial_Transactions.account_id, Financial_Transactions.card_id, Financial_Transactions.transaction_type, Financial_Transactions.transaction_date, Financial_Transactions.transaction_amount, Financial_Transactions.transaction_comment, Financial_Transactions.other_transaction_details What is the SQL query?",
    "answer": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
    "from": "spider"
  },
  {
    "question": "Question: How many tracks do we have? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT count(*) FROM track",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of tracks. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT count(*) FROM track",
    "from": "spider"
  },
  {
    "question": "Question: Show the name and location for all tracks. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  LOCATION FROM track",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and locations of all tracks? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  LOCATION FROM track",
    "from": "spider"
  },
  {
    "question": "Question: Show names and seatings, ordered by seating for all tracks opened after 2000. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and seatings for all tracks opened after 2000, ordered by seating? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
    "from": "spider"
  },
  {
    "question": "Question: What is the name, location and seating for the most recently opened track? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the name, location, and seating of the track that was opened in the most recent year. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the minimum, maximum, and average seating for all tracks. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
    "from": "spider"
  },
  {
    "question": "Question: Return the minimum, maximum, and average seating across all tracks. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
    "from": "spider"
  },
  {
    "question": "Question: Show the name, location, open year for all tracks with a seating higher than the average. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
    "from": "spider"
  },
  {
    "question": "Question: What are the names, locations, and years of opening for tracks with seating higher than average? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
    "from": "spider"
  },
  {
    "question": "Question: What are distinct locations where tracks are located? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT DISTINCT LOCATION FROM track",
    "from": "spider"
  },
  {
    "question": "Question: Give the different locations of tracks. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT DISTINCT LOCATION FROM track",
    "from": "spider"
  },
  {
    "question": "Question: How many races are there? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT count(*) FROM race",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of races. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT count(*) FROM race",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct classes that races can have? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT DISTINCT CLASS FROM race",
    "from": "spider"
  },
  {
    "question": "Question: Return the different classes of races. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT DISTINCT CLASS FROM race",
    "from": "spider"
  },
  {
    "question": "Question: Show name, class, and date for all races. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  CLASS ,  date FROM race",
    "from": "spider"
  },
  {
    "question": "Question: What are the names, classes, and dates for all races? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name ,  CLASS ,  date FROM race",
    "from": "spider"
  },
  {
    "question": "Question: Show the race class and number of races in each class. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
    "from": "spider"
  },
  {
    "question": "Question: What are the different classes of races, and how many races correspond to each? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
    "from": "spider"
  },
  {
    "question": "Question: What is the race class with most number of races. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Give the class of races that is most common. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: List the race class with at least two races. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the classes of races that have two or more corresponding races? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the names for tracks without a race in class 'GT'. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
    "from": "spider"
  },
  {
    "question": "Question: Give the names of tracks that do not have a race in the class 'GT'. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
    "from": "spider"
  },
  {
    "question": "Question: Show all track names that have had no races. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
    "from": "spider"
  },
  {
    "question": "Question: Return the names of tracks that have no had any races. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
    "from": "spider"
  },
  {
    "question": "Question: Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
    "from": "spider"
  },
  {
    "question": "Question: What are the years of opening for tracks with seating between 4000 and 5000? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
    "from": "spider"
  },
  {
    "question": "Question: Show the name of track and the number of races in each track. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of different tracks, and how many races has each had? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
    "from": "spider"
  },
  {
    "question": "Question: Show the name of track with most number of races. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the track that has had the greatest number of races? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the name and date for each race and its track name. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and dates of races, and the names of the tracks where they are held? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
    "from": "spider"
  },
  {
    "question": "Question: Show the name and location of track with 1 race. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and locations of tracks that have had exactly 1 race? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
    "from": "spider"
  },
  {
    "question": "Question: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
    "from": "spider"
  },
  {
    "question": "Question: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? | Tables: race, track | Columns: race.Race_ID, race.Name, race.Class, race.Date, race.Track_ID, track.Track_ID, track.Name, track.Location, track.Seating, track.Year_Opened What is the SQL query?",
    "answer": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
    "from": "spider"
  },
  {
    "question": "Question: How many members have the black membership card? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of members living in each address. | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT count(*) ,  address FROM member GROUP BY address",
    "from": "spider"
  },
  {
    "question": "Question: Give me the names of members whose address is in Harford or Waterbury. | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'",
    "from": "spider"
  },
  {
    "question": "Question: Find the ids and names of members who are under age 30 or with black membership card. | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30",
    "from": "spider"
  },
  {
    "question": "Question: Find the purchase time, age and address of each member, and show the results in the order of purchase time. | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
    "from": "spider"
  },
  {
    "question": "Question: Which membership card has more than 5 members? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
    "from": "spider"
  },
  {
    "question": "Question: Which address has both members younger than 30 and members older than 40? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
    "from": "spider"
  },
  {
    "question": "Question: What is the membership card held by both members living in Hartford and ones living in Waterbury address? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
    "from": "spider"
  },
  {
    "question": "Question: How many members are not living in Hartford? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT count(*) FROM member WHERE address != 'Hartford'",
    "from": "spider"
  },
  {
    "question": "Question: Which address do not have any member with the black membership card? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
    "from": "spider"
  },
  {
    "question": "Question: Show the shop addresses ordered by their opening year. | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT address FROM shop ORDER BY open_year",
    "from": "spider"
  },
  {
    "question": "Question: What are the average score and average staff number of all shops? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT avg(num_of_staff) ,  avg(score) FROM shop",
    "from": "spider"
  },
  {
    "question": "Question: Find the id and address of the shops whose score is below the average score. | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)",
    "from": "spider"
  },
  {
    "question": "Question: Find the address and staff number of the shops that do not have any happy hour. | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
    "from": "spider"
  },
  {
    "question": "Question: What are the id and address of the shops which have a happy hour in May? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
    "from": "spider"
  },
  {
    "question": "Question: which shop has happy hour most frequently? List its id and number of happy hours. | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which month has the most happy hours? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which months have more than 2 happy hours? | Tables: shop, member, happy_hour, happy_hour_member | Columns: shop.Shop_ID, shop.Address, shop.Num_of_staff, shop.Score, shop.Open_Year, member.Member_ID, member.Name, member.Membership_card, member.Age, member.Time_of_purchase, member.Level_of_membership, member.Address, happy_hour.HH_ID, happy_hour.Shop_ID, happy_hour.Month, happy_hour.Num_of_shaff_in_charge, happy_hour_member.HH_ID, happy_hour_member.Member_ID, happy_hour_member.Total_amount What is the SQL query?",
    "answer": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
    "from": "spider"
  },
  {
    "question": "Question: How many albums are there? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT count(*) FROM ALBUM",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of albums. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT count(*) FROM ALBUM",
    "from": "spider"
  },
  {
    "question": "Question: List the names of all music genres. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Name FROM GENRE",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of different music genres? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Name FROM GENRE",
    "from": "spider"
  },
  {
    "question": "Question: Find all the customer information in state NY. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
    "from": "spider"
  },
  {
    "question": "Question: What is all the customer information for customers in NY state? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the first names and last names of the employees who live in Calgary city. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the full names of employees living in the city of Calgary. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct billing countries of the invoices? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT distinct(BillingCountry) FROM INVOICE",
    "from": "spider"
  },
  {
    "question": "Question: Find the different billing countries for all invoices. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT distinct(BillingCountry) FROM INVOICE",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all artists that have \"a\" in their names. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of artist who have the letter 'a' in their names? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the title of all the albums of the artist \"AC/DC\". | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles of albums by the artist \"AC/DC\"? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
    "from": "spider"
  },
  {
    "question": "Question: Hom many albums does the artist \"Metallica\" have? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of albums by the artist \"Metallica\". | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
    "from": "spider"
  },
  {
    "question": "Question: Which artist does the album \"Balls to the Wall\" belong to? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the artist who made the album \"Balls to the Wall\". | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
    "from": "spider"
  },
  {
    "question": "Question: Which artist has the most albums? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the artist with the greatest number of albums? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of all the tracks that contain the word \"you\". | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of tracks that contain the the word you in them? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
    "from": "spider"
  },
  {
    "question": "Question: What is the average unit price of all the tracks? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT AVG(UnitPrice) FROM TRACK",
    "from": "spider"
  },
  {
    "question": "Question: Find the average unit price for a track. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT AVG(UnitPrice) FROM TRACK",
    "from": "spider"
  },
  {
    "question": "Question: What are the durations of the longest and the shortest tracks in milliseconds? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
    "from": "spider"
  },
  {
    "question": "Question: Find the maximum and minimum durations of tracks in milliseconds. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
    "from": "spider"
  },
  {
    "question": "Question: Show the album names, ids and the number of tracks for each album. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and ids of the different albums, and how many tracks are on each? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the most common genre in all tracks? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of the genre that is most frequent across all tracks. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the least common media type in all tracks? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the media type that is least common across all tracks? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Show the album names and ids for albums that contain tracks with unit price bigger than 1. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
    "from": "spider"
  },
  {
    "question": "Question: What are the titles and ids for albums containing tracks with unit price greater than 1? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
    "from": "spider"
  },
  {
    "question": "Question: How many tracks belong to rock genre? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of tracks that are part of the rock genre. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average unit price of tracks that belong to Jazz genre? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the average unit price of jazz tracks. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the full name of the customer with the email \"luisg@embraer.com.br\". | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
    "from": "spider"
  },
  {
    "question": "Question: How many customers have email that contains \"gmail.com\"? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of customers that have an email containing \"gmail.com\". | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the first name and last name employee helps the customer with first name Leonie? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the full names of employees who help customers with the first name Leonie. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
    "from": "spider"
  },
  {
    "question": "Question: What city does the employee who helps the customer with postal code 70174 live in? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the cities corresponding to employees who help customers with the postal code 70174. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct cities does the employees live in? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
    "from": "spider"
  },
  {
    "question": "Question: Find the number of different cities that employees live in. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
    "from": "spider"
  },
  {
    "question": "Question: Find all invoice dates corresponding to customers with first name Astrid and last name Gruber. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the invoice dates for customers with the first name Astrid and the last name Gruber? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
    "from": "spider"
  },
  {
    "question": "Question: Find all the customer last names that do not have invoice totals larger than 20. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
    "from": "spider"
  },
  {
    "question": "Question: What are the last names of customers without invoice totals exceeding 20? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
    "from": "spider"
  },
  {
    "question": "Question: Find the first names of all customers that live in Brazil and have an invoice. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the different first names for customers from Brazil who have also had an invoice? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the address of all customers that live in Germany and have invoice. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the addresses of customers living in Germany who have had an invoice? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
    "from": "spider"
  },
  {
    "question": "Question: List the phone numbers of all employees. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Phone FROM EMPLOYEE",
    "from": "spider"
  },
  {
    "question": "Question: What are the phone numbers for each employee? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Phone FROM EMPLOYEE",
    "from": "spider"
  },
  {
    "question": "Question: How many tracks are in the AAC audio file media type? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of tracks that are of the media type \"AAC audio file\". | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the average duration in milliseconds of tracks that belong to Latin or Pop genre? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the average millisecond length of Latin and Pop tracks. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
    "from": "spider"
  },
  {
    "question": "Question: Please show the employee first names and ids of employees who serve at least 10 customers. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
    "from": "spider"
  },
  {
    "question": "Question: What are the first names and support rep ids for employees serving 10 or more customers? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
    "from": "spider"
  },
  {
    "question": "Question: Please show the employee last names that serves no more than 20 customers. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
    "from": "spider"
  },
  {
    "question": "Question: What are the last names of employees who serve at most 20 customers? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
    "from": "spider"
  },
  {
    "question": "Question: Please list all album titles in alphabetical order. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Title FROM ALBUM ORDER BY Title",
    "from": "spider"
  },
  {
    "question": "Question: What are all the album titles, in alphabetical order? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Title FROM ALBUM ORDER BY Title",
    "from": "spider"
  },
  {
    "question": "Question: Please list the name and id of all artists that have at least 3 albums in alphabetical order. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and ids of artists with 3 or more albums, listed in alphabetical order? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of artists that do not have any albums. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of artists who have not released any albums? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
    "from": "spider"
  },
  {
    "question": "Question: What is the average unit price of rock tracks? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the average unit price of tracks from the Rock genre. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the duration of the longest and shortest pop tracks in milliseconds? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the maximum and minimum millisecond lengths of pop tracks. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the birth dates of employees living in Edmonton? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the birth dates corresponding to employees who live in the city of Edmonton. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct unit prices of all tracks? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT distinct(UnitPrice) FROM TRACK",
    "from": "spider"
  },
  {
    "question": "Question: Find the distinct unit prices for tracks. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT distinct(UnitPrice) FROM TRACK",
    "from": "spider"
  },
  {
    "question": "Question: How many artists do not have any album? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
    "from": "spider"
  },
  {
    "question": "Question: Cound the number of artists who have not released an album. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
    "from": "spider"
  },
  {
    "question": "Question: What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks? | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
    "from": "spider"
  },
  {
    "question": "Question: Find the titles of albums that contain tracks of both the Reggae and Rock genres. | Tables: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track | Columns: Album.AlbumId, Album.Title, Album.ArtistId, Artist.ArtistId, Artist.Name, Customer.CustomerId, Customer.FirstName, Customer.LastName, Customer.Company, Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode, Customer.Phone, Customer.Fax, Customer.Email, Customer.SupportRepId, Employee.EmployeeId, Employee.LastName, Employee.FirstName, Employee.Title, Employee.ReportsTo, Employee.BirthDate, Employee.HireDate, Employee.Address, Employee.City, Employee.State, Employee.Country, Employee.PostalCode What is the SQL query?",
    "answer": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
    "from": "spider"
  },
  {
    "question": "Question: Find all the phone numbers. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_phone FROM available_policies",
    "from": "spider"
  },
  {
    "question": "Question: What are all the phone numbers? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_phone FROM available_policies",
    "from": "spider"
  },
  {
    "question": "Question: What are the customer phone numbers under the policy \"Life Insurance\"? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the phone numbers of customers using the policy with the code \"Life Insurance\"? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
    "from": "spider"
  },
  {
    "question": "Question: Which policy type has the most records in the database? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which policy type appears most frequently in the available policies? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are all the customer phone numbers under the most popular policy type? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
    "from": "spider"
  },
  {
    "question": "Question: Find the phone numbers of customers using the most common policy type among the available policies. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
    "from": "spider"
  },
  {
    "question": "Question: Find the policy type used by more than 4 customers. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
    "from": "spider"
  },
  {
    "question": "Question: Find the policy types more than 4 customers use. Show their type code. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
    "from": "spider"
  },
  {
    "question": "Question: Find the total and average amount of settlements. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
    "from": "spider"
  },
  {
    "question": "Question: Return the sum and average of all settlement amounts. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
    "from": "spider"
  },
  {
    "question": "Question: Find the name of services that have been used for more than 2 times in first notification of loss. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
    "from": "spider"
  },
  {
    "question": "Question: Which services have been used more than twice in first notification of loss? Return the service name. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
    "from": "spider"
  },
  {
    "question": "Question: What is the effective date of the claim that has the largest amount of total settlement? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the claim that has the largest total settlement amount. Return the effective date of the claim. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many policies are listed for the customer named \"Dayana Robel\"? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
    "from": "spider"
  },
  {
    "question": "Question: Count the total number of policies used by the customer named \"Dayana Robel\". | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
    "from": "spider"
  },
  {
    "question": "Question: What is the name of the customer who has the most policies listed? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Which customer uses the most policies? Give me the customer name. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are all the policy types of the customer named \"Dayana Robel\"? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
    "from": "spider"
  },
  {
    "question": "Question: Tell me the types of the policy used by the customer named \"Dayana Robel\". | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
    "from": "spider"
  },
  {
    "question": "Question: What are all the policy types of the customer that has the most policies listed? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
    "from": "spider"
  },
  {
    "question": "Question: List all the policy types used by the customer enrolled in the most policies. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
    "from": "spider"
  },
  {
    "question": "Question: List all the services in the alphabetical order. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT service_name FROM services ORDER BY service_name",
    "from": "spider"
  },
  {
    "question": "Question: Give me a list of all the service names sorted alphabetically. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT service_name FROM services ORDER BY service_name",
    "from": "spider"
  },
  {
    "question": "Question: How many services are there? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT count(*) FROM services",
    "from": "spider"
  },
  {
    "question": "Question: Count the total number of available services. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT count(*) FROM services",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of users who do not have a first notification of loss record. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
    "from": "spider"
  },
  {
    "question": "Question: Which customers do not have a first notification of loss record? Give me the customer names. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\". | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
    "from": "spider"
  },
  {
    "question": "Question: Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\". | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
    "from": "spider"
  },
  {
    "question": "Question: Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
    "from": "spider"
  },
  {
    "question": "Question: Find the IDs of customers whose name contains \"Diana\". | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the IDs of customers who have \"Diana\" in part of their names? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the maximum and minimum settlement amount on record? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
    "from": "spider"
  },
  {
    "question": "Question: Find the maximum and minimum settlement amount. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
    "from": "spider"
  },
  {
    "question": "Question: List all the customers in increasing order of IDs. | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
    "from": "spider"
  },
  {
    "question": "Question: What is the ordered list of customer ids? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
    "from": "spider"
  },
  {
    "question": "Question: Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\" | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names? | Tables: Customers, Services, Available_Policies, Customers_Policies, First_Notification_of_Loss, Claims, Settlements | Columns: Customers.Customer_ID, Customers.Customer_name, Services.Service_ID, Services.Service_name, Available_Policies.Policy_ID, Available_Policies.policy_type_code, Available_Policies.Customer_Phone, Customers_Policies.Customer_ID, Customers_Policies.Policy_ID, Customers_Policies.Date_Opened, Customers_Policies.Date_Closed, First_Notification_of_Loss.FNOL_ID, First_Notification_of_Loss.Customer_ID, First_Notification_of_Loss.Policy_ID, First_Notification_of_Loss.Service_ID, Claims.Claim_ID, Claims.FNOL_ID, Claims.Effective_Date, Settlements.Settlement_ID, Settlements.Claim_ID, Settlements.Effective_Date, Settlements.Settlement_Amount What is the SQL query?",
    "answer": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
    "from": "spider"
  },
  {
    "question": "Question: How many kinds of enzymes are there? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT count(*) FROM enzyme",
    "from": "spider"
  },
  {
    "question": "Question: What is the total count of enzymes? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT count(*) FROM enzyme",
    "from": "spider"
  },
  {
    "question": "Question: List the name of enzymes in descending lexicographical order. | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name FROM enzyme ORDER BY name DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of enzymes in descending order? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name FROM enzyme ORDER BY name DESC",
    "from": "spider"
  },
  {
    "question": "Question: List the names and the locations that the enzymes can make an effect. | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name ,  LOCATION FROM enzyme",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and locations of all enzymes listed? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name ,  LOCATION FROM enzyme",
    "from": "spider"
  },
  {
    "question": "Question: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT max(OMIM) FROM enzyme",
    "from": "spider"
  },
  {
    "question": "Question: What is the maximum OMIM value in the database? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT max(OMIM) FROM enzyme",
    "from": "spider"
  },
  {
    "question": "Question: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
    "from": "spider"
  },
  {
    "question": "Question: What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of enzymes who does not produce 'Heme'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name FROM enzyme WHERE product != 'Heme'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of enzymes whose product is not 'Heme'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name FROM enzyme WHERE product != 'Heme'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and trade names of the medicines which has 'Yes' value in the FDA record? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names and trade names of the medcines that are FDA approved? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids and names of the medicine that can interact with two or more enzymes? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: For every medicine id, what are the names of the medicines that can interact with more than one enzyme? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with. | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
    "from": "spider"
  },
  {
    "question": "Question: What is the id and name of the enzyme with most number of medicines that can interact as 'activator'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the id and name of the enzyme that can interact with the most medicines as an activator? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
    "from": "spider"
  },
  {
    "question": "Question: What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
    "from": "spider"
  },
  {
    "question": "Question: What is the most common interaction type between enzymes and medicine? And how many are there? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the most common types of interactions between enzymes and medicine, and how many types are there? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many medicines have the FDA approval status 'No' ? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
    "from": "spider"
  },
  {
    "question": "Question: How many medicines were not approved by the FDA? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
    "from": "spider"
  },
  {
    "question": "Question: How many enzymes do not have any interactions? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
    "from": "spider"
  },
  {
    "question": "Question: What is the count of enzymes without any interactions? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
    "from": "spider"
  },
  {
    "question": "Question: What is the id and trade name of the medicines can interact with at least 3 enzymes? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
    "from": "spider"
  },
  {
    "question": "Question: What are the ids and trade names of the medicine that can interact with at least 3 enzymes? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
    "from": "spider"
  },
  {
    "question": "Question: What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
    "from": "spider"
  },
  {
    "question": "Question: What are the different names, locations, and products of the enzymes that are capable inhibitor interactions? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
    "from": "spider"
  },
  {
    "question": "Question: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
    "from": "spider"
  },
  {
    "question": "Question: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
    "from": "spider"
  },
  {
    "question": "Question: Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'. | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
    "from": "spider"
  },
  {
    "question": "Question: What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
    "from": "spider"
  },
  {
    "question": "Question: How many distinct FDA approval statuses are there for the medicines? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT count(DISTINCT FDA_approved) FROM medicine",
    "from": "spider"
  },
  {
    "question": "Question: How many different FDA approval statuses exist for medicines? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT count(DISTINCT FDA_approved) FROM medicine",
    "from": "spider"
  },
  {
    "question": "Question: Which enzyme names have the substring \"ALA\"? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
    "from": "spider"
  },
  {
    "question": "Question: What are the names of enzymes that include the string 'ALA'? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
    "from": "spider"
  },
  {
    "question": "Question: find the number of medicines offered by each trade. | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
    "from": "spider"
  },
  {
    "question": "Question: How many medicines are offered by each trade name? | Tables: medicine, enzyme, medicine_enzyme_interaction | Columns: medicine.id, medicine.name, medicine.Trade_Name, medicine.FDA_approved, enzyme.id, enzyme.name, enzyme.Location, enzyme.Product, enzyme.Chromosome, enzyme.OMIM, enzyme.Porphyria, medicine_enzyme_interaction.enzyme_id, medicine_enzyme_interaction.medicine_id, medicine_enzyme_interaction.interaction_type What is the SQL query?",
    "answer": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
    "from": "spider"
  },
  {
    "question": "Question: List all schools and their nicknames in the order of founded year. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT school ,  nickname FROM university ORDER BY founded",
    "from": "spider"
  },
  {
    "question": "Question: What are the different schools and their nicknames, ordered by their founding years? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT school ,  nickname FROM university ORDER BY founded",
    "from": "spider"
  },
  {
    "question": "Question: List all public schools and their locations. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
    "from": "spider"
  },
  {
    "question": "Question: What are the public schools and what are their locations? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
    "from": "spider"
  },
  {
    "question": "Question: When was the school with the largest enrollment founded? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the founded year for the school with the largest enrollment. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the founded year of the newest non public school. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the founded year of the non public school that was founded most recently? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: How many schools are in the basketball match? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(DISTINCT school_id) FROM basketball_match",
    "from": "spider"
  },
  {
    "question": "Question: Count the number of schools that have had basketball matches. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT count(DISTINCT school_id) FROM basketball_match",
    "from": "spider"
  },
  {
    "question": "Question: What is the highest acc percent score in the competition? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the highest acc percent across all basketball matches. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the primary conference of the school that has the lowest acc percent score in the competition? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the primary conference of the school with the lowest acc percentage score. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the team name and acc regular season score of the school that was founded for the longest time? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Return the name of the team and the acc during the regular season for the school that was founded the earliest. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: Find the location and all games score of the school that has Clemson as its team name. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
    "from": "spider"
  },
  {
    "question": "Question: What are the all games score and location of the school called Clemson? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
    "from": "spider"
  },
  {
    "question": "Question: What are the average enrollment size of the universities that are founded before 1850? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
    "from": "spider"
  },
  {
    "question": "Question: Return the average enrollment of universities founded before 1850. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
    "from": "spider"
  },
  {
    "question": "Question: Show the enrollment and primary_conference of the oldest college. | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What are the enrollment and primary conference for the university which was founded the earliest? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
    "from": "spider"
  },
  {
    "question": "Question: What is the total and minimum enrollment of all schools? | Tables: basketball_match, university | Columns: basketball_match.Team_ID, basketball_match.School_ID, basketball_match.Team_Name, basketball_match.ACC_Regular_Season, basketball_match.ACC_Percent, basketball_match.ACC_Home, basketball_match.ACC_Road, basketball_match.All_Games, basketball_match.All_Games_Percent, basketball_match.All_Home, basketball_match.All_Road, basketball_match.All_Neutral, university.School_ID, university.School, university.Location, university.Founded, university.Affiliation, university.Enrollment, university.Nickname, university.Primary_conference What is the SQL query?",
    "answer": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
    "from": "spider"
  }
]